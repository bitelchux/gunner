class Boot
  constructor: (game) ->
  preload: ->
    @load.image('preloaderBar', '<%= image_path('preloader_bar.png') %>')
  create: ->
    @input.maxPointers = 1
    @stage.disableVisibilityChange = true
    if @game.device.desktop
      @scale.scaleMode = Phaser.ScaleManager.SHOW_ALL
      @scale.minWidth = 480
      @scale.minHeight = 260
      @scale.maxWidth = 800
      @scale.maxHeight = 600
      @scale.pageAlignHorizontally = true
      @scale.pageAlignVertically = true
      @scale.setScreenSize true
    else
      @scale.scaleMode = Phaser.ScaleManager.SHOW_ALL
      @scale.minWidth = 480
      @scale.minHeight = 260
      @scale.maxWidth = 800
      @scale.maxHeight = 600
      @scale.pageAlignHorizontally = true
      @scale.pageAlignVertically = true
      @scale.forceOrientation true, false
      @scale.hasResized.add @gameResized, this
      @scale.enterIncorrectOrientation.add @enterIncorrectOrientation, this
      @scale.leaveIncorrectOrientation.add @leaveIncorrectOrientation, this
      @scale.setScreenSize true
    @state.start('Preloader')

  gameResized: (width, height) ->
    # This could be handy if you need to do any extra processing if the game resizes.
    # A resize could happen if for example swapping orientation on a device.
    
  enterIncorrectOrientation: ->
    @game.orientated = false
    document.getElementById("orientation").style.display = "block"
    return

  leaveIncorrectOrientation: ->
    @game.orientated = true
    document.getElementById("orientation").style.display = "none"
    return

class Preloader
  constructor: (game) ->
  preload: ->
    @loadingText = @add.text(400, 270, "Loading", { font: '30px "Army Wide", monospace', fill: '#fff' })
    @loadingText.anchor.setTo(0.5, 0.5)
    @preloaderBar = @add.sprite(400, 300, 'preloaderBar')
    @preloaderBar.anchor.setTo(0.5, 0.5)

    @load.setPreloadSprite(@preloaderBar)

    @load.image('sea', '<%= image_path('sea.png') %>')
    @load.image('crosshair', '<%= image_path('crosshair.png') %>')
    @load.image('bomb', '<%= image_path('bomb.png') %>')
    <% %w{small large burst}.each do |x| %>
    @load.image('turret-<%= x %>', '<%= image_path("turret-#{x}.png") %>')
    @load.image('bullet-<%= x %>', '<%= image_path("bullet-#{x}.png") %>')
    <% end %>
    <% %w{small large burst single triple bomb}.each do |x| %>
    @load.image('bbtn-<%= x %>', '<%= image_path("bbtn-#{x}.png") %>')
    @load.image('bbtnd-<%= x %>', '<%= image_path("bbtnd-#{x}.png") %>')
    <% end %>
    <% [0, 1, 3].each do |x| %>
    @load.spritesheet('enemy<%= x %>', '<%= image_path("enemy#{x}.png") %>', 32, 32)
    <% end %>
    @load.spritesheet('enemy2', '<%= image_path("enemy2.png") %>', 32, 98)
    @load.spritesheet('enemy4', '<%= image_path("enemy4.png") %>', 93, 75)
    @load.spritesheet('enemy5', '<%= image_path("enemy5.png") %>', 32, 174)
    @load.spritesheet('enemy6', '<%= image_path("enemy6.png") %>', 32, 32)

    @load.spritesheet('explosion', '<%= image_path("explosion.png") %>', 32, 32, 6)
    @load.spritesheet('explosion2', '<%= image_path("explosion2.png") %>', 64, 64, 7)
    @load.image('deck', '<%= image_path('deck.png') %>')
    @load.spritesheet('sound', '<%= image_path('sound.png') %>', 24, 24)

    @load.audio('fire', ['<%= audio_path("fire.wav") %>'])
    @load.audio('burst', ['<%= audio_path("burst.wav") %>'])
    @load.audio('bomb', ['<%= audio_path("bomb.wav") %>'])
    @load.audio('explosion', ['<%= audio_path("explosion.wav") %>'])
    @load.audio('explosion2', ['<%= audio_path("explosion2.wav") %>'])
    @load.audio('damage', ['<%= audio_path("damage.wav") %>'])

  create: ->
    @state.start('MainMenu')

class MainMenu
  create: ->
    @stage.backgroundColor = '#2d2d2d'
    @titleText = @add.text(400, 150, "Gunner", { font: '90px "Army Wide", monospace', fill: '#fff' })
    @titleText.anchor.setTo(0.5, 0.5)

    @menuTexts = {}
    @setupTopLevel()


  addText: (text, x, y, selected, small) ->
    @menuTexts[text] = @add.text(x, y, text,
      {
        font: "#{ if small then 16 else 22 }px 'Army Wide', monospace",
        fill: (if selected then '#fff' else '#888')
      })
    @menuTexts[text].anchor.setTo(0.5, 0.5)
    @menuTexts[text].inputEnabled = true
    @menuTexts[text].events.onInputDown.add(@menuSelect, @menuTexts[text])


  menuSelect: ->
    state = @game.state.getCurrentState()
    switch @text
      when "Play Game"
        state.setupOptions()
      when "Start Game"
        @game.lengthMultplier = 5
        @game.state.start('Game')

  setupTopLevel: ->
    @addText 'Play Game', 400, 350, true
    @addText 'How To Play', 400, 380, false
    @addText 'High Scores', 400, 410, false
    @addText 'Credits', 400, 440, false
    @game.menuIndex = 0

  setupOptions: ->
    text.destroy() for key, text of @menuTexts

    @addText 'Game Type', 250, 300, true
    @addText 'Time Attack', 250, 350, true, true
    @addText 'Survival', 250, 370, false, true
    @addText 'Game Length', 550, 300, true
    @addText 'Quick', 550, 340, false, true
    @addText 'Normal', 550, 360, true, true
    @addText 'Extended', 550, 380, false, true
    @addText 'Start Game', 400, 450, true

class Game
  @RKE_FIGHTER = 0
  @REG_FIGHTER = 1
  @SUBMARINE = 2
  @VET_FIGHTER = 3
  @BOMBER = 4
  @DESTROYER = 5
  @ELT_FIGHTER = 6

  constructor: (game) ->
    @nextFire =
      small: 0
      large: 0
      burst: 0

    @enemyRate = [0, 0, 0, 0, 0, 0, 0]
    @nextEnemy = [0, 0, 0, 0, 0, 0, 0]
    @enemyLvlUpExpire = 0
    @ammo = 100
    @kills = 0
    @selectedBullet = 'small'
    @selectedFire = 'single'

  ENEMY_LVL_CHART:
    0:
      action: ["unlock", @RKE_FIGHTER, 1000, 20]
      next: 20
    20:
      action: ["setSpawnRate", @RKE_FIGHTER, 600]
      next: 50
    50:
      action: ["unlock", @REG_FIGHTER, 5000, 10]
      next: 100
    100:
      action: ["setMaxCount", @RKE_FIGHTER, 30]
      next: 150
    150:
      action: ["setSpawnRate", @REG_FIGHTER, 2500]
      next: 200
    200:
      action: ["setSpawnRate", @RKE_FIGHTER, 400]
      next: 300
    300:
      action: ["setSpawnRate", @REG_FIGHTER, 1700]
      next: 400
    400:
      action: ["setSpawnRate", @RKE_FIGHTER, 300]
      next: 500
    500:
      action: ["setMaxCount", @RKE_FIGHTER, 40]
      next: 750
    750:
      action: ["unlock", @SUBMARINE, 10000, 10]
      next: 1000
    1000:
      action: ["setSpawnRate", @REG_FIGHTER, 1200]
      next: 1250
    1250:
      action: ["setSpawnRate", @RKE_FIGHTER, 250]
      next: 1500
    1500:
      action: ["setMaxCount", @REG_FIGHTER, 20]
      next: 1750
    1750:
      action: ["setSpawnRate", @RKE_FIGHTER, 200]
      next: 2000
    2000:
      action: ["unlock", @VET_FIGHTER, 10000, 10]
      next: 2250
    2250:
      action: ["setMaxCount", @RKE_FIGHTER, 60]
      next: 2500
    2500:
      action: ["setMaxCount", @REG_FIGHTER, 30]
      next: 2750
    2750:
      action: ["setSpawnRate", @VET_FIGHTER, 7500]
      next: 3000
    3000:
      action: ["setSpawnRate", @SUBMARINE, 8000]
      next: 3250
    3250:
      action: ["setMaxCount", @RKE_FIGHTER, 80]
      next: 3500
    3500:
      action: ["setSpawnRate", @REG_FIGHTER, 800]
      next: 3750
    3750:
      action: ["setSpawnRate", @SUBMARINE, 7000]
      next: 4000
    4000:
      action: ["unlock", @BOMBER, 10000, 10]
      next: 4250
    4250:
      action: ["setSpawnRate", @VET_FIGHTER, 5000]
      next: 4500
    4500:
      action: ["setSpawnRate", @RKE_FIGHTER, 150]
      next: 4750
    4750:
      action: ["setMaxCount", @RKE_FIGHTER, 120]
      next: 5000
    5000:
      action: ["setSpawnRate", @BOMBER, 8000]
      next: 5250
    5250:
      action: ["setSpawnRate", @REG_FIGHTER, 700]
      next: 5500
    5500:
      action: ["setMaxCount", @REG_FIGHTER, 50]
      next: 5750
    5750:
      action: ["setSpawnRate", @VET_FIGHTER, 4000]
      next: 6000
    6000:
      action: ["unlock", @DESTROYER, 20000, 2]
      next: 8000
    8000:
      action: ["setSpawnRate", @DESTROYER, 15000]
      next: 10000
    10000:
      action: ["unlock", @ELT_FIGHTER, 30000, 1]
      next: null

  BULLET_TYPES: ['small', 'large', 'burst']
  FIRING_TYPES: ['single', 'triple', 'bomb']

  ENEMY_TYPES: ['Rookie Fighter', 'Regular Fighter', 'Submarine', 'Veteran Fighter', 'Bomber', 'Destroyer', 'Elite Fighter']

  AMMO_REQ:
    small: 1
    large: 3
    burst: 8
    single: 1
    triple: 3
    bomb: 10

  BULLET_OFFSET:
    small: 20
    large: 30
    burst: 35

  FIRE_RATE:
    small: 100
    large: 150
    burst: 250
    single: 1
    triple: 2.5
    bomb: 5

  HIT_RATE:
    "bullet-small":
      enemy0: 0.66
      enemy1: 0.30
      enemy2: 0.05
      enemy3: 0.05
      enemy4: 0.009
      enemy5: 0.0055
      enemy6: 0.002
    "bullet-large":
      enemy0: 1
      enemy1: 0.9
      enemy2: 0.2
      enemy3: 0.12
      enemy4: 0.03
      enemy5: 0.019
      enemy6: 0.008
    "bullet-burst":
      enemy0: 1
      enemy1: 1
      enemy2: 0.35
      enemy3: 0.15
      enemy4: 0.05
      enemy5: 0.025
      enemy6: 0.01

  REWARD:
    enemy0: 2
    enemy1: 5
    enemy2: 25
    enemy3: 50
    enemy4: 100
    enemy5: 200
    enemy6: 500

  #
  # FUNCTIONS
  # 
  preload: ->
    @stage.disableVisibilityChange = true
    return

  create: ->
    @land = @add.tileSprite(0, 0, 800, 600, 'sea')

    @gameTimer = @time.create(false)
    @gameTimer.start()
    @setupEnemies()
    @setupExplosions()

    @crosshair = @add.sprite(400, 300, 'crosshair')
    @crosshair.anchor.setTo(0.5, 0.5)
    @crosshair.speed = 300
    @physics.enable(@crosshair, Phaser.Physics.ARCADE)
    @crosshair.body.collideWorldBounds = true
    @cursors = @input.keyboard.createCursorKeys()

    @setupBullets()
    @setupAudio()
    @setupDeck()
    @setupText()

    @levelUpEnemy(0)

    return

  update: ->
    @land.tilePosition.y += 0.5
    @checkEnemyLevelUp()

    @toggleBullets()
    @fire() if @input.activePointer.isDown or @input.keyboard.isDown(Phaser.Keyboard.Z)

    @checkCollision()
    @spawnEnemies()


    if @ammo <= 0 and (true for bullets in @bullets when bullets.countLiving() > 0).length == 0
      @add.text(400, 250, "GAME OVER", { font: '72px Army Wide', fill: '#fff' }).anchor.setTo(0.5, 0.5)

  render: ->
    @timeText.text = @timeDisplay()
    return

  timeDisplay: ->
    ms = @gameTimer.ms
    minutes = Math.floor(ms / 60000)
    seconds = ms - (minutes * 60000)
    ms = seconds % 1000
    seconds = Math.floor(seconds / 1000)
    "#{minutes}' #{('00' + seconds).slice(-2)}\" #{('000' + ms).slice(-3)}"

  # 
  # CREATE functions
  #
  setupEnemies: ->
    @enemies = []
    @enemiesGroup = @add.group()
    for i in [0...@ENEMY_TYPES.length]
      enemies = @add.group()
      enemies.enableBody = true
      enemies.physicsBodyType = Phaser.Physics.ARCADE
      @enemies.push(enemies)

    for i in [5, 2, 6, 4, 3, 1, 0]
      @enemiesGroup.add(@enemies[i])

  setupExplosions: ->
    @explosions = @add.group()
    @explosions.enableBody = true
    @explosions.physicsBodyType = Phaser.Physics.ARCADE
    @explosions.createMultiple(200, 'explosion')
    @explosions.forEach(((explosion) ->
      explosion.animations.add 'explosion'
    ), this)
    @explosions.setAll('anchor.x', 0.5)
    @explosions.setAll('anchor.y', 0.5)

    @explosions2 = @add.group()
    @explosions2.enableBody = true
    @explosions2.physicsBodyType = Phaser.Physics.ARCADE
    @explosions2.createMultiple(10, 'explosion2')
    @explosions2.forEach(((explosion) ->
      explosion.animations.add 'explosion'
    ), this)
    @explosions2.setAll('anchor.x', 0.5)
    @explosions2.setAll('anchor.y', 0.5)

  setupBullets: ->
    @bullets = []
    for bullet in @BULLET_TYPES
      bullets = @add.group()
      bullets.enableBody = true
      bullets.physicsBodyType = Phaser.Physics.ARCADE
      # console.log 'bullet-' + bullet
      bullets.createMultiple(100, 'bullet-' + bullet, 0, false)
      bullets.setAll('anchor.x', 0.5)
      bullets.setAll('anchor.y', 0.5)
      bullets.setAll('outOfBoundsKill', true)
      bullets.setAll('checkWorldBounds', true)
      @bullets.push bullets

    @bombs = @add.group()
    @bombs.createMultiple(10, 'bomb')
    @bombs.setAll('anchor.x', 0.5)
    @bombs.setAll('anchor.y', 0.5)

  setupAudio: ->
    @fireSFX = @add.audio('fire')
    @burstSFX = @add.audio('burst')
    @bombSFX = @add.audio('bomb')
    @explosionSFX = @add.audio('explosion')
    @explosion2SFX = @add.audio('explosion2')
    @damageSFX = @add.audio('damage')

  setupDeck: ->
    @deck = @add.sprite(0, 520, 'deck')

    @turrets = {}
    @leftTurrets = {}
    @rightTurrets = {}
    @bbtn = {}
    @bbtnd = {}
    # toggle bullet types
    for i in @BULLET_TYPES
      @turrets[i] = @add.sprite(400, 525, 'turret-' + i)
      @turrets[i].anchor.setTo(0.3, 0.5)
      @leftTurrets[i] = @add.sprite(150, 525, 'turret-' + i)
      @leftTurrets[i].anchor.setTo(0.3, 0.5)
      @rightTurrets[i] = @add.sprite(650, 525, 'turret-' + i)
      @rightTurrets[i].anchor.setTo(0.3, 0.5)
      @bbtnd[i] = @add.sprite(200 + (@BULLET_TYPES.indexOf(i)) * 60, 545, 'bbtnd-' + i)
      @bbtnd[i].inputEnabled = true
      @bbtn[i] = @add.sprite(200 + (@BULLET_TYPES.indexOf(i)) * 60, 545, 'bbtn-' + i)
      @bbtn[i].inputEnabled = true
      @bbtnd[i].kill()

      # closure required for toggle
      ((spriteGroup, disabledSpriteGroup, i, game) ->
        spriteGroup.events.onInputDown.add( () ->
          game.selectedBullet = i
        , this)
        disabledSpriteGroup.events.onInputDown.add( () ->
          game.selectedBullet = i
        , this)
      )(@bbtn[i], @bbtnd[i], i, this)

    for i in @FIRING_TYPES
      @bbtnd[i] = @add.sprite(440 + (@FIRING_TYPES.indexOf(i)) * 60, 545, 'bbtnd-' + i)
      @bbtnd[i].inputEnabled = true
      @bbtn[i] = @add.sprite(440 + (@FIRING_TYPES.indexOf(i)) * 60, 545, 'bbtn-' + i)
      @bbtn[i].inputEnabled = true
      @bbtnd[i].kill()

      ((spriteGroup, disabledSpriteGroup, i, game) ->
        spriteGroup.events.onInputDown.add( () ->
          game.selectedFire = i
        , this)
        disabledSpriteGroup.events.onInputDown.add( () ->
          game.selectedFire = i
        , this)
      )(@bbtn[i], @bbtnd[i], i, this)

    @soundIcon = @add.sprite(750, 560, 'sound')
    @soundIcon.anchor.setTo(0.5, 0.5)
    @soundIcon.animations.add('on', [ 0 ])
    @soundIcon.animations.add('off', [ 1 ])
    @soundIcon.play('on')
    @soundIcon.inputEnabled = true
    @soundIcon.events.onInputDown.add( ->
      if @sound.mute
        @sound.mute = false
        @soundIcon.play('on')
      else
        @sound.mute = true
        @soundIcon.play('off')
    , this)

  setupText: ->
    @timeText = @add.text(400, 15, '', { font: '20px Army Wide', fill: '#fff' })
    @timeText.anchor.setTo(0.5, 0.5)

    @ammoText = @add.text(790, 15, 'Energy: ' + @ammo, { font: '14px Army Wide', fill: '#fff' })
    @ammoText.anchor.setTo(1, 0.5)

    @killText = @add.text(10, 35, "Kills: 0", { font: '14px Army Wide', fill: '#fff' })
    @killText.anchor.setTo(0, 0.5)

    @nextWaveText = @add.text(10, 15, "Next Level: #{@nextEnemyLvlUp} kills", { font: '14px Army Wide', fill: '#fff' })
    @nextWaveText.anchor.setTo(0, 0.5)

    @enemyLvlUpText = @add.text(400, 250, "", { font: '20px Army Wide', fill: '#fff' })
    @enemyLvlUpText.anchor.setTo(0.5, 0.5)

  #
  # UPDATE functions
  #
  toggleBullets: ->
    if @input.keyboard.isDown(Phaser.Keyboard.ONE) and not (@selectedBullet is 'small')
      @selectedBullet = 'small'
    else if @input.keyboard.isDown(Phaser.Keyboard.TWO) and not (@selectedBullet is 'large')
      @selectedBullet = 'large'
    else if @input.keyboard.isDown(Phaser.Keyboard.THREE) and not (@selectedBullet is 'burst')
      @selectedBullet = 'burst'

    if @input.keyboard.isDown(Phaser.Keyboard.Q) and not (@selectedBullet is 'single')
      @selectedFire = 'single'
    else if @input.keyboard.isDown(Phaser.Keyboard.W) and not (@selectedBullet is 'triple')
      @selectedFire = 'triple'
    else if @input.keyboard.isDown(Phaser.Keyboard.E) and not (@selectedBullet is 'bomb')
      @selectedFire = 'bomb'

    # change turret sprite
    if @lastSelectedBullet isnt @selectedBullet or @lastSelectedFire isnt @selectedFire
      for i in @BULLET_TYPES
        @turrets[i].kill()
        @leftTurrets[i].kill()
        @rightTurrets[i].kill()
        unless i is @selectedBullet
          @bbtn[i].kill()
          @bbtnd[i].revive()
        else
          @bbtnd[i].kill()
          @bbtn[i].revive()

      for i in @FIRING_TYPES
        unless i is @selectedFire
          @bbtn[i].kill()
          @bbtnd[i].revive()
        else
          @bbtnd[i].kill()
          @bbtn[i].revive()

      if @selectedFire is 'single' or @selectedFire is 'triple'
        @turrets[@selectedBullet].revive()
      if @selectedFire is 'triple'
        @leftTurrets[@selectedBullet].revive()
        @rightTurrets[@selectedBullet].revive()

      @lastSelectedBullet = @selectedBullet
      @lastSelectedFire = @selectedFire

    @crosshair.body.velocity.x = 0
    @crosshair.body.velocity.y = 0
    if @input.activePointer.withinGame
      @crosshair.x = @input.activePointer.worldX
      @crosshair.y = @input.activePointer.worldY
    else
      if @cursors.left.isDown
        @crosshair.body.velocity.x = -@crosshair.speed
      else if @cursors.right.isDown
        @crosshair.body.velocity.x = @crosshair.speed

      if @cursors.up.isDown
        @crosshair.body.velocity.y = -@crosshair.speed
      else if @cursors.down.isDown
        @crosshair.body.velocity.y = @crosshair.speed

    if @input.activePointer.withinGame or (key for key, status of @cursors when status.isDown).length > 0
      turretAngle = @physics.arcade.angleBetween(@turrets[@selectedBullet], @crosshair)
      @turrets[@selectedBullet].rotation = turretAngle unless 0 < turretAngle < Math.PI

      if @selectedFire is 'triple'
        turretAngle = @physics.arcade.angleBetween(@leftTurrets[@selectedBullet], @crosshair)
        @leftTurrets[@selectedBullet].rotation = turretAngle unless 0 < turretAngle < Math.PI
        turretAngle = @physics.arcade.angleBetween(@rightTurrets[@selectedBullet], @crosshair)
        @rightTurrets[@selectedBullet].rotation = turretAngle unless 0 < turretAngle < Math.PI

  fire: ->
    return if @input.activePointer.isDown and @input.activePointer.worldY >= 520
      
    bullets = @bullets[@BULLET_TYPES.indexOf(@selectedBullet)]
    ammoReq = @AMMO_REQ[@selectedBullet] * @AMMO_REQ[@selectedFire]
    if (@ammo >= ammoReq and @time.now > @nextFire[@selectedBullet] && bullets.countDead() > @AMMO_REQ[@selectedBullet])
      @nextFire[@selectedBullet] = @time.now + @FIRE_RATE[@selectedBullet] * @FIRE_RATE[@selectedFire]
      @fireSFX.play()

      if @selectedFire is 'single' or @selectedFire is 'triple'
        @turretFire(@turrets[@selectedBullet], bullets)

      if @selectedFire is 'triple'
        @turretFire(@leftTurrets[@selectedBullet], bullets)
        @turretFire(@rightTurrets[@selectedBullet], bullets)

      if @selectedFire is 'bomb'
        bomb = @bombs.getFirstExists(false)
        bomb.reset(@crosshair.x, @crosshair.y)
        bomb.shot = @selectedBullet
        bomb.scale.setTo(3, 3)
        @add.tween(bomb.scale).to({ x: 0.5, y: 0.5 }, 2000, Phaser.Easing.Linear.None, true)
        rotate = @add.tween(bomb).to({ angle: 360 }, 2000)
        rotate.onComplete.add( ->
          t = @game.state.getCurrentState()
          bullets = t.bullets[t.BULLET_TYPES.indexOf(@shot)]
          angle = Math.random() * 2 * Math.PI
          for i in [0..4]
            b = bullets.getFirstExists(false)
            b.reset(@x, @y)
            b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5)) * 200
            b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5)) * 200
          for i in [0..4]
            b = bullets.getFirstExists(false)
            b.reset(@x, @y)
            b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5 + Math.PI / 5)) * 200
            b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5 + Math.PI / 5)) * 200
          @kill()
          t.bombSFX.play()
        , bomb)
        rotate.start()


      @ammo-= ammoReq
      @ammoText.text = 'Energy: ' + @ammo
      if @ammo < 25
        @ammoText.setStyle({font: '14px Army Wide', fill: "#f22"})

  turretFire: (turret, bullets) ->
    bullet = bullets.getFirstExists(false)
    angle = @physics.arcade.angleBetween(turret, @crosshair)
    offset = @BULLET_OFFSET[@selectedBullet]
    bullet.reset(turret.x + Math.cos(angle) * offset, turret.y + Math.sin(angle) * offset)
    @physics.arcade.moveToObject(bullet, @crosshair, 200)

  checkCollision: ->
    for i in [0...@ENEMY_TYPES.length]
      for j in [0...@BULLET_TYPES.length]
        @physics.arcade.overlap(@bullets[j], @enemies[i], @collisionHandler, null, this)
      @enemies[i].forEach( (enemy) ->
        enemy.kill() if enemy.y > 530 or enemy.x < -50 or enemy.x > 850
      , this)

  spawnEnemies: ->
    #console.log "#{game.time.now} #{nextEnemy0} #{enemies.countDead()}"
    if @time.now > @nextEnemy[0] and @enemies[0].countDead() > 0
      @nextEnemy[0] = @time.now + @enemyRate[0]
      enemy = @enemies[0].getFirstExists(false)
      enemy.reset(20 + Math.random() * 760, 0)
      enemy.body.velocity.y = 30 + Math.random() * 30
      enemy.play('fly')

    if @time.now > @nextEnemy[1] and @enemies[1].countDead() > 0
      @nextEnemy[1] = @time.now + @enemyRate[1]
      enemy = @enemies[1].getFirstExists(false)
      if Math.random() < 0.5
        enemy.reset(0, 20 + Math.random() * 420)
        enemy.body.velocity.x = 40 + Math.random() * 40
        enemy.rotation = -Math.PI / 2
      else
        enemy.reset(800, 20 + Math.random() * 420)
        enemy.body.velocity.x = -(40 + Math.random() * 40)
        enemy.rotation = Math.PI / 2
      enemy.play('fly')

    if @time.now > @nextEnemy[2] and @enemies[2].countDead() > 0
      y = 20 + Math.random() * 480
      unless (sub for sub in @enemies[2].children when sub.alive and sub.y <= y + 32 and sub.y + 32 >= y).length > 0 or
          (dest for dest in @enemies[5].children when dest.alive and dest.y <= y + 32 and dest.y + 32 >= y).length > 0
        @nextEnemy[2] = @time.now + @enemyRate[2]
        enemy = @enemies[2].getFirstExists(false)
        if Math.random() < 0.5
          enemy.reset(Math.random() * 200, y)
          enemy.rotation = -Math.PI / 2
          enemy.body.velocity.x = 20 + Math.random() * 20
        else
          enemy.reset(800 - Math.random() * 200, y)
          enemy.rotation = Math.PI / 2
          enemy.body.velocity.x = -(20 + Math.random() * 20)
        enemy.body.setSize(98, 32, 0, 0)
        enemy.play('rise')

    if @time.now > @nextEnemy[3] and @enemies[3].countDead() > 0
      @nextEnemy[3] = @time.now + @enemyRate[3]
      enemy = @enemies[3].getFirstExists(false)
      start = @rnd.integerInRange(20, 500)
      end = @rnd.integerInRange(20, 500)
      enemy.body.velocity.x = 60 + Math.random() * 60
      if Math.random() < 0.5
        enemy.reset(0, start)
        enemy.rotation = @physics.arcade.moveToXY(
          enemy, 800, end, @rnd.integerInRange(60, 120)
        ) - Math.PI / 2
      else
        enemy.reset(800, start)
        enemy.rotation = @physics.arcade.moveToXY(
          enemy, 0, end, @rnd.integerInRange(60, 120)
        ) - Math.PI / 2
      enemy.play('fly')

    if @time.now > @nextEnemy[4] and @enemies[4].countDead() > 0
      @nextEnemy[4] = @time.now + @enemyRate[4]
      enemy = @enemies[4].getFirstExists(false)
      enemy.reset(40 + Math.random() * 740, 0)
      enemy.body.velocity.y = 30 + Math.random() * 20
      enemy.play('fly')

    if @time.now > @nextEnemy[5] and @enemies[5].countDead() > 0
      y = 20 + Math.random() * 480
      unless (sub for sub in @enemies[2].children when sub.alive and sub.y <= y + 32 and sub.y + 32 >= y).length > 0 or
          (dest for dest in @enemies[5].children when dest.alive and dest.y <= y + 32 and dest.y + 32 >= y).length > 0
        @nextEnemy[5] = @time.now + @enemyRate[5]
        enemy = @enemies[5].getFirstExists(false)
        if Math.random() < 0.5
          enemy.reset(-45, y)
          enemy.rotation = -Math.PI / 2
          enemy.body.velocity.x = 10 + Math.random() * 10
        else
          enemy.reset(845, y)
          enemy.rotation = Math.PI / 2
          enemy.body.velocity.x = -(10 + Math.random() * 10)

        enemy.body.setSize(174, 32, 0, 0)
        enemy.play('cruise')

    if @time.now > @nextEnemy[6] and @enemies[6].countDead() > 0
      @nextEnemy[6] = @time.now + @enemyRate[6]
      enemy = @enemies[6].getFirstExists(false)
      enemy.reset(10 + Math.random() * 790, 0)
      enemy.body.velocity.y = 100 + Math.random() * 200
      enemy.play('fly')

  collisionHandler: (bullet, enemy) ->
    if bullet.key is 'bullet-burst'
      bullets = @bullets[0]
      angle = Math.random() * 2 * Math.PI
      for i in [0..4]
        b = bullets.getFirstExists(false)
        b.reset(bullet.x, bullet.y)
        b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5)) * 200
        b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5)) * 200
      @burstSFX.play()

    bullet.kill()
    if Math.random() < @HIT_RATE[bullet.key][enemy.key]
      i = parseInt(enemy.key.slice(5))
      explosion = switch enemy.key
        when "enemy4", "enemy5", "enemy6"
          @explosion2SFX.play()
          @explosions2.getFirstExists(false)
        else
          @explosionSFX.play()
          @explosions.getFirstExists(false)

      explosion.reset(enemy.x, enemy.y)
      explosion.body.velocity.x = enemy.body.velocity.x
      explosion.body.velocity.y = enemy.body.velocity.y
      enemy.kill()
      explosion.play('explosion', 15, false, true)

      reward = @add.text(enemy.x, enemy.y, "#{@REWARD[enemy.key]}", { font: '16px Army Wide', fill: '#fff' })
      reward.anchor.setTo(0.5, 0.5)
      rise = @add.tween(reward)
      rise.to({ y: enemy.y - 16 }, 250)
      fade = @add.tween(reward)
      fade.to({ y: enemy.y - 64, alpha: 0 })
      rise.chain(fade)
      fade.onComplete.add(->
        @destroy()
      , reward)
      rise.start()
      @ammo += @REWARD[enemy.key]
      @ammoText.text = 'Energy: ' + @ammo
      if @ammo > 25
        @ammoText.setStyle({font: '14px Army Wide', fill: "#fff"})
      @kills++
      @killText.text = "Kills: " + @kills
    else
      enemy.play('hit')
      @damageSFX.play()

  checkEnemyLevelUp: ->
    if @nextEnemyLvlUp? and @kills >= @nextEnemyLvlUp
      @levelUpEnemy(@nextEnemyLvlUp * @game.lengthMultplier)

  levelUpEnemy: (kills) ->
    return unless @ENEMY_LVL_CHART[kills]?
    action = @ENEMY_LVL_CHART[kills].action
    switch action[0]
      when "unlock"
        @unlockEnemy(action[1], action[2], action[3])
      when "setSpawnRate"
        @enemyRate[action[1]] = action[2]
        @enemyLvlUpText.text = @ENEMY_TYPES[action[1]] + "s are arriving at a faster rate!"
        @setLvlUpExpire()
      when "setMaxCount"
        @setMaxCount(action[1], action[2])

    @nextEnemyLvlUp = @ENEMY_LVL_CHART[kills].next
    if @nextEnemyLvlUp?
      @nextEnemyLvlUp /= @game.lengthMultplier
      @nextWaveText.text =  "Next Level: #{@nextEnemyLvlUp} kills"
    else
      @nextWaveText.text =  "Max Level Reached"

  unlockEnemy: (enemyIdx, spawnRate, maxCount) ->
    @enemyRate[enemyIdx] = spawnRate
    @enemies[enemyIdx].removeAll(true)
    @enemies[enemyIdx].createMultiple(maxCount, 'enemy' + enemyIdx, 0, false)
    @setSpriteInfo(enemyIdx)
    @enemyLvlUpText.text = @ENEMY_TYPES[enemyIdx] + "s have appeared!"
    @setLvlUpExpire()

  setMaxCount: (enemyIdx, maxCount) ->
    current = @enemies[enemyIdx].children.length
    if current < maxCount
      @enemies[enemyIdx].createMultiple(maxCount - current, 'enemy' + enemyIdx, 0, false)
    @setSpriteInfo(enemyIdx)
    @enemyLvlUpText.text = @ENEMY_TYPES[enemyIdx] + "s have increased in numbers!"
    @setLvlUpExpire()

  setLvlUpExpire: ->
    @time.events.add(Phaser.Timer.SECOND * 5, ->
      @enemyLvlUpText.text = ""
    , this)

  setSpriteInfo: (enemyIdx) ->
    switch enemyIdx
      when 0, 1, 3, 4, 6
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('hit', [ 3, 2, 3, 2 ], 20, false)
          enemy.animations.add('fly', [ 0, 1, 2 ], 20, true)
          enemy.events.onAnimationComplete.add( (enemy) ->
            enemy.play('fly')
          , this)
        , this)
      when 2
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('rise', [ 1, 2, 3, 4, 5, 0 ], 10, false)
          enemy.animations.add('hit', [ 6, 0, 6, 0, 6, 0 ], 10, false)
          enemy.animations.add('cruise', [ 0 ], 20, true)
        , this)
      when 5
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('hit', [ 2, 0, 2, 1 ], 20, false)
          enemy.animations.add('cruise', [ 0, 1 ], 20, true)
          enemy.events.onAnimationComplete.add( (enemy) ->
            enemy.play('cruise')
          , this)
        , this)

    @enemies[enemyIdx].setAll('anchor.x', 0.5)
    @enemies[enemyIdx].setAll('anchor.y', 0.5)


game = new Phaser.Game(800, 600, Phaser.AUTO, 'game-container')
game.state.add('Boot', Boot)
game.state.add('Preloader', Preloader)
game.state.add('MainMenu', MainMenu)
game.state.add('Game', Game)

game.state.start('Boot')
