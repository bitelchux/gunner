Store = new Persist.Store('Gunner Scores')
Gunner = window.Gunner

class Game

  constructor: (game) ->

  #
  # FUNCTIONS
  # 
  preload: ->
    @stage.disableVisibilityChange = false
    return

  create: ->
    @canFire = true
    @enemySpawners = {}
    @enemyLvlUpExpire = 0
    @energy = 100
    @kills = 0
    @lastSelectedBullet = null
    @lastSelectedFire = null
    @selectedBullet = 'small'
    @selectedFire = 'single'
    @previousLvlUp = 0
    @nextEnemyLvlUp = null
    @endScore = null

    @land = @add.tileSprite(0, 0, 800, 530, 'sea')
    @land.autoScroll -30, 10
    @stage.backgroundColor = '#333'

    if @game.gameType is 'Time Attack'
      @gameTimer = @time.create(false)
      @gameTimer.start()
    else
      @drain = 1
      @drainCounter = @game.time.create(false)
      @drainCounter.loop(60000, ->
        @energy -= @calcDrain()
        @adjustEnergyBar()
        penalty = @add.text(165, @barHeight, "-#{@calcDrain()}", { font: '24px Special Elite', fill: '#fff' })
        penalty.anchor.setTo(0.5, 0.5)
        rise = @add.tween(penalty)
        rise.to({ y: @barHeight + 50 })
        fade = @add.tween(penalty)
        fade.to({ y: @barHeight + 100, alpha: 0 })
        rise.chain(fade)
        fade.onComplete.add(->
          @destroy()
        , penalty)
        rise.start()
        @drain++
        @drainText.text = "-#{@calcDrain()} energy in:"
      , this)
      @drainCounter.start()
    @setupEnemies()
    @setupExplosions()

    @crosshair = @add.sprite(400, 300, 'assets', 'crosshair')
    @crosshair.anchor.setTo(0.5, 0.5)
    @crosshair.speed = 300
    @physics.enable(@crosshair, Phaser.Physics.ARCADE)
    @crosshair.body.collideWorldBounds = true
    @crosshair.body.setSize 1, 1, 0, 0
    @cursors = @input.keyboard.createCursorKeys()

    @setupBullets()
    @setupDeck()
    @setupAudio()
    @setupText()

    @shareImages = []

    @levelUpEnemy(0)
    @time.advancedTiming = true

    @versionText = @add.bitmapText(10, 480, 'SpecialEliteOutline14', 'v0.4', 14)
    @fpsText = @add.bitmapText(10, 498, 'SpecialEliteOutline14', 'fps', 14)

    return

  update: ->
    @checkEnemyLevelUp()

    @toggleBullets()
    @fire() if (@input.activePointer.isDown and @input.activePointer.worldY < 520) or @input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)

    @checkCollision()

    if @energy <= 0
      for bullets in @bullets
        for bullet in bullets.children
          bullet.kill() if bullet.alive and !bullet.inWorld

      if (true for bullets in @bullets when bullets.countLiving() > 0).length <= 0 and (@bombs.countLiving() <= 0)
        @displayEnd(false)

  render: ->
    unless @gameEnd
      if @game.gameType is 'Time Attack'
        @timeText.text = Gunner.timeDisplay(@gameTimer.ms)
      else
        @timeText.text = Gunner.timeDisplay(@drainCounter.duration)

    @fpsText.text = "#{@time.fps} fps"

    if @delayedAction?
      if @delayedAction is 'restart'
        @delayedAction = null
        @restartGame()
      if @delayedAction is 'quit'
        @delayedAction = null
        @quitGame()
    return

  calcDrain: ->
    @drain * 5 * @game.lengthMultplier

  # 
  # CREATE functions
  #
  setupEnemies: ->
    @enemies = []
    @enemiesGroup = @add.group()
    for i in [0...Gunner.ENEMY_TYPES.length]
      enemies = @add.group()
      enemies.enableBody = true
      enemies.physicsBodyType = Phaser.Physics.ARCADE
      @enemies.push(enemies)

    for i in [5, 2, 6, 4, 3, 1, 0]
      @enemiesGroup.add(@enemies[i])

  setupExplosions: ->
    @explosions = @add.group()
    @explosions.enableBody = true
    @explosions.physicsBodyType = Phaser.Physics.ARCADE
    @explosions.createMultiple(200, 'assets')
    @explosions.forEach(((explosion) ->
      explosion.animations.add 'explosion', Phaser.Animation.generateFrameNames('explosion-', 0, 5, '', 1)
    ), this)
    @explosions.setAll('anchor.x', 0.5)
    @explosions.setAll('anchor.y', 0.5)

    @explosions2 = @add.group()
    @explosions2.enableBody = true
    @explosions2.physicsBodyType = Phaser.Physics.ARCADE
    @explosions2.createMultiple(10, 'assets')
    @explosions2.forEach(((explosion) ->
      explosion.animations.add 'explosion', Phaser.Animation.generateFrameNames('explosion2-', 0, 6, '', 1)
    ), this)
    @explosions2.setAll('anchor.x', 0.5)
    @explosions2.setAll('anchor.y', 0.5)

  setupBullets: ->
    @bullets = []
    for bullet in Gunner.BULLET_TYPES
      bullets = @add.group()
      bullets.enableBody = true
      bullets.physicsBodyType = Phaser.Physics.ARCADE
      # console.log 'bullet-' + bullet
      bullets.createMultiple(100, 'assets', 'bullet-' + bullet, false)
      bullets.setAll('name', 'bullet-' + bullet)
      bullets.setAll('anchor.x', 0.5)
      bullets.setAll('anchor.y', 0.5)
      bullets.setAll('outOfBoundsKill', true)
      bullets.setAll('checkWorldBounds', true)
      @bullets.push bullets

    @bombs = @add.group()
    @bombs.createMultiple(10, 'assets', 'bomb')
    @bombs.setAll('anchor.x', 0.5)
    @bombs.setAll('anchor.y', 0.5)

  setupAudio: ->
    @fireSFX = @add.audio('fire')
    @burstSFX = @add.audio('burst')
    @bombSFX = @add.audio('bomb')
    @explosionSFX = @add.audio('explosion')
    @explosion2SFX = @add.audio('explosion2')
    @damageSFX = @add.audio('damage')

  setupDeck: ->
    @turrets = {}
    @leftTurrets = {}
    @rightTurrets = {}
    for i in Gunner.BULLET_TYPES
      @turrets[i] = @add.sprite(400, 525, 'assets', 'turret-' + i)
      @turrets[i].anchor.setTo(0.3, 0.5)
      @leftTurrets[i] = @add.sprite(300, 525, 'assets', 'turret-' + i)
      @leftTurrets[i].anchor.setTo(0.3, 0.5)
      @rightTurrets[i] = @add.sprite(500, 525, 'assets', 'turret-' + i)
      @rightTurrets[i].anchor.setTo(0.3, 0.5)

    @deck = @add.sprite(0, 520, 'assets', 'deck')

    @barHeight = if @game.gameType is 'Time Attack' then 30 else 40
    
    @energyContainer = @add.sprite(165, @barHeight, 'assets', 'kill-container')
    @energyContainer.anchor.setTo 0.5, 0.5

    @energyFills = []
    for i in Gunner.ENERGY_BARS
      bar = @add.sprite(37, @barHeight, 'assets', 'energy-' + i)
      bar.anchor.setTo 0, 0.5
      bar.kill()
      @energyFills.push bar

    @killContainer = @add.sprite(635, @barHeight, 'assets', 'kill-container')
    @killContainer.anchor.setTo 0.5, 0.5
    @killFill = @add.sprite(507, @barHeight, 'assets', 'kill-fill')
    @killFill.anchor.setTo 0, 0.5
    @killFill.scale.setTo 0, 1

    @rewardTexts = []
    for i in [1..30]
      reward = @add.text(0, 0, ' ', { font: '14px Special Elite', fill: '#fff' })
      reward.anchor.setTo 0.5, 0.5
      @rewardTexts.push reward

    @bbtn = {}
    @bbtnd = {}
    # toggle bullet types
    for i in Gunner.FIRING_TYPES
      @bbtnd[i] = @add.sprite(495 + (Gunner.FIRING_TYPES.indexOf(i)) * 95, 535, 'assets', 'bbtnd-' + i)
      @bbtnd[i].inputEnabled = true
      @bbtn[i] = @add.sprite(495 + (Gunner.FIRING_TYPES.indexOf(i)) * 95, 535,'assets',  'bbtn-' + i)
      @bbtn[i].inputEnabled = true
      @bbtnd[i].kill()

      ((spriteGroup, disabledSpriteGroup, i, game) ->
        spriteGroup.events.onInputDown.add( () ->
          game.selectedFire = i
        , this)
        disabledSpriteGroup.events.onInputDown.add( () ->
          game.selectedFire = i
        , this)
      )(@bbtn[i], @bbtnd[i], i, this)

    for i in Gunner.BULLET_TYPES
      @bbtnd[i] = @add.sprite(30 + (Gunner.BULLET_TYPES.indexOf(i)) * 95, 535, 'assets', 'bbtnd-' + i)
      @bbtnd[i].inputEnabled = true
      @bbtn[i] = @add.sprite(30 + (Gunner.BULLET_TYPES.indexOf(i)) * 95, 535, 'assets', 'bbtn-' + i)
      @bbtn[i].inputEnabled = true
      @bbtnd[i].kill()

      # closure required for toggle
      ((spriteGroup, disabledSpriteGroup, i, game) ->
        spriteGroup.events.onInputDown.add( () ->
          game.selectedBullet = i
        , this)
        disabledSpriteGroup.events.onInputDown.add( () ->
          game.selectedBullet = i
        , this)
      )(@bbtn[i], @bbtnd[i], i, this)


    @soundIcon = @add.sprite(360, 565, 'assets', 'sound-0')
    @soundIcon.anchor.setTo(0.5, 0.5)
    @soundIcon.animations.add('on', ['sound-0'])
    @soundIcon.animations.add('off', ['sound-1'])
    @soundIcon.animations.add('low', ['sound-low'])
    @soundIcon.animations.add('medium', ['sound-medium'])
    if @sound.mute
      @soundIcon.play('off')
    else
      if @sound.volume == 1
        @soundIcon.play('on')
      else if @sound.volume >= 0.66
        @soundIcon.play('medium')
      else
        @soundIcon.play('low')
    @soundIcon.inputEnabled = true
    @soundIcon.events.onInputDown.add( ->
      if @sound.mute
        @sound.mute = false
        @sound.volume = 0.33
        @soundIcon.play('low')
      else if @sound.volume <= 0.34
        @sound.volume = 0.66
        @soundIcon.play('medium')
      else if @sound.volume <= 0.67
        @sound.volume = 1
        @soundIcon.play('on')
      else
        @sound.mute = true
        @soundIcon.play('off')
    , this)

    @optionsIcon = @add.sprite(440, 565, 'assets', 'options')
    @optionsIcon.anchor.setTo(0.5, 0.5)
    @optionsIcon.inputEnabled = true
    @optionsIcon.events.onInputDown.add( ->
      unless @game.paused
        @pauseGame()
    , this)

    <%#@fullscreenIcon = @add.sprite(460, 565, 'assets', 'expand')%>
    <%#@fullscreenIcon.anchor.setTo(0.5, 0.5)%>
    <%#@fullscreenIcon.animations.add('expand', ['expand'])%>
    <%#@fullscreenIcon.animations.add('compress', ['compress'])%>
    <%#@fullscreenIcon.inputEnabled = true%>
    <%#@fullscreenIcon.events.onInputDown.add( ->%>
      <%#if @scale.isFullScreen%>
        <%#@fullscreenIcon.play('expand')%>
        <%#@scale.stopFullScreen()%>
      <%#else%>
        <%#@fullscreenIcon.play('compress')%>
        <%#@scale.startFullScreen()%>
    <%#, this)%>
    <%#@scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL%>


  setupText: ->
    @timeText = @add.text(400, 30, '', { font: '28px monospace', fill: '#fff' })
    unless @game.gameType is 'Time Attack'
      @timeText.y = 50
      @drainText = @add.text(400, 20, "-#{@calcDrain()} energy in:", { font: '14px Special Elite', fill: '#fff',  })
      @drainText.anchor.setTo(0.5, 0.5)

    @timeText.anchor.setTo(0.5, 0.5)


    @energyText = @add.bitmapText(165, @barHeight - 9, 'SpecialEliteOutline14', 'Energy: ' + @energy, 14)
    @adjustEnergyBar()

    @killText = @add.bitmapText(635, @barHeight - 9, 'SpecialEliteOutline14', "Kills: 0", 14)

    @enemyLvlUpText = @add.bitmapText(400, 250, 'SpecialElite32', '', 24)
    Gunner.center(@enemyLvlUpText)

  adjustEnergyBar: ->
    @energyText.text = 'Energy: ' + @energy
    Gunner.horizontalCenter(@energyText)
    if @energy < 0
      @energyFills[0].kill() if @energyFills[0].alive
    if @energy <= Gunner.ENERGY_TIERS[0]
      @energyFills[1].kill() if @energyFills[1].alive
    if @energy <= Gunner.ENERGY_TIERS[1]
      @energyFills[2].kill() if @energyFills[2].alive
    if @energy <= Gunner.ENERGY_TIERS[2]
      @energyFills[3].kill() if @energyFills[3].alive

    return if @energy < 0

    @energyFills[0].revive() unless @energyFills[0].alive
    if @energy <= Gunner.ENERGY_TIERS[0]
      @energyFills[0].scale.setTo((256 * @energy / Gunner.ENERGY_TIERS[0]), 1)
      return
    @energyFills[0].scale.setTo(256, 1)

    @energyFills[1].revive() unless @energyFills[1].alive
    if @energy <= Gunner.ENERGY_TIERS[1]
      @energyFills[1].scale.setTo(256 * (@energy - Gunner.ENERGY_TIERS[0]) / (Gunner.ENERGY_TIERS[1] - Gunner.ENERGY_TIERS[0]), 1)
      return
    @energyFills[1].scale.setTo(256, 1)

    @energyFills[2].revive() unless @energyFills[2].alive
    if @energy <= Gunner.ENERGY_TIERS[2]
      @energyFills[2].scale.setTo(256 * (@energy - Gunner.ENERGY_TIERS[1]) / (Gunner.ENERGY_TIERS[2] - Gunner.ENERGY_TIERS[1]), 1)
      return
    @energyFills[2].scale.setTo(256, 1)

    @energyFills[3].revive() unless @energyFills[3].alive
    if @energy <= Gunner.ENERGY_TIERS[3]
      @energyFills[3].scale.setTo(256 * (@energy - Gunner.ENERGY_TIERS[2]) / (Gunner.ENERGY_TIERS[3] - Gunner.ENERGY_TIERS[2]), 1)
      return
    @energyFills[3].scale.setTo(256, 1)
  
  adjustKillBar: ->
    if @nextEnemyLvlUp is null and @kills >= @endScore
      @killFill.scale.setTo(256, 1)
      if @game.gameType is 'Time Attack'
        @killText.text = "Max Kills Reached"
        @displayEnd(true)
      else
        @killText.text = "Max Level Reached (#{@kills})"
    else
      divisor = if @nextEnemyLvlUp? then @nextEnemyLvlUp else @endScore
      @killText.text = "Kills: #{@kills} / #{divisor}"
      @killFill.scale.setTo((256 * (@kills - @previousLvlUp) / (divisor - @previousLvlUp)), 1)
    Gunner.horizontalCenter(@killText)

  #
  # UPDATE functions
  #
  toggleBullets: ->
    if @input.keyboard.isDown(Phaser.Keyboard.ONE) and not (@selectedBullet is 'small')
      @selectedBullet = 'small'
    else if @input.keyboard.isDown(Phaser.Keyboard.TWO) and not (@selectedBullet is 'large')
      @selectedBullet = 'large'
    else if @input.keyboard.isDown(Phaser.Keyboard.THREE) and not (@selectedBullet is 'burst')
      @selectedBullet = 'burst'

    if @input.keyboard.isDown(Phaser.Keyboard.Q) and not (@selectedBullet is 'single')
      @selectedFire = 'single'
    else if @input.keyboard.isDown(Phaser.Keyboard.W) and not (@selectedBullet is 'triple')
      @selectedFire = 'triple'
    else if @input.keyboard.isDown(Phaser.Keyboard.E) and not (@selectedBullet is 'bomb')
      @selectedFire = 'bomb'

    # change turret sprite
    if @lastSelectedBullet isnt @selectedBullet or @lastSelectedFire isnt @selectedFire
      for i in Gunner.BULLET_TYPES
        @turrets[i].kill()
        @leftTurrets[i].kill()
        @rightTurrets[i].kill()
        unless i is @selectedBullet
          @bbtn[i].kill()
          @bbtnd[i].revive()
        else
          @bbtnd[i].kill()
          @bbtn[i].revive()

      for i in Gunner.FIRING_TYPES
        unless i is @selectedFire
          @bbtn[i].kill()
          @bbtnd[i].revive()
        else
          @bbtnd[i].kill()
          @bbtn[i].revive()

      if @selectedFire is 'single' or @selectedFire is 'triple'
        @turrets[@selectedBullet].revive()
      if @selectedFire is 'triple'
        @leftTurrets[@selectedBullet].revive()
        @rightTurrets[@selectedBullet].revive()
        @rotateSideTurrets()

      @lastSelectedBullet = @selectedBullet
      @lastSelectedFire = @selectedFire

    @crosshair.body.velocity.x = 0
    @crosshair.body.velocity.y = 0
    if @input.activePointer.withinGame and @input.activePointer.worldY < 520
      @crosshair.x = @input.activePointer.worldX
      @crosshair.y = @input.activePointer.worldY
    else
      if @cursors.left.isDown
        @crosshair.body.velocity.x = -@crosshair.speed
      else if @cursors.right.isDown
        @crosshair.body.velocity.x = @crosshair.speed

      if @cursors.up.isDown
        @crosshair.body.velocity.y = -@crosshair.speed
      else if @cursors.down.isDown
        @crosshair.body.velocity.y = @crosshair.speed

    if (@input.activePointer.withinGame and @input.activePointer.worldY < 520) or
        (key for key, status of @cursors when status.isDown).length > 0
      turretAngle = @physics.arcade.angleBetween(
        @turrets[@selectedBullet], @crosshair)
      @turrets[@selectedBullet].rotation =
        turretAngle unless 0 < turretAngle < Math.PI

      if @selectedFire is 'triple'
        @rotateSideTurrets()

  rotateSideTurrets: ->
    turretAngle = @physics.arcade.angleBetween(
      @leftTurrets[@selectedBullet], @crosshair)
    @leftTurrets[@selectedBullet].rotation =
      turretAngle unless 0 < turretAngle < Math.PI
    turretAngle = @physics.arcade.angleBetween(
      @rightTurrets[@selectedBullet], @crosshair)
    @rightTurrets[@selectedBullet].rotation =
      turretAngle unless 0 < turretAngle < Math.PI

  fire: ->
    return if @gameEnd
    return if @input.activePointer.isDown and @input.activePointer.worldY >= 520
      
    bullets = @bullets[Gunner.BULLET_TYPES.indexOf(@selectedBullet)]
    energyReq = Gunner.ENERGY_REQ[@selectedBullet] * Gunner.ENERGY_REQ[@selectedFire]
    if (@energy >= energyReq and @canFire and
        bullets.countDead() > Gunner.ENERGY_REQ[@selectedBullet])
      @canFire = false
      @time.events.add(
        Gunner.FIRE_RATE[@selectedBullet] * Gunner.FIRE_RATE[@selectedFire], ->
          @canFire = true
        , this
      )
      @fireSFX.play()

      if @selectedFire is 'single' or @selectedFire is 'triple'
        @turretFire(@turrets[@selectedBullet], bullets)

      if @selectedFire is 'triple'
        @turretFire(@leftTurrets[@selectedBullet], bullets)
        @turretFire(@rightTurrets[@selectedBullet], bullets)

      if @selectedFire is 'bomb'
        bomb = @bombs.getFirstExists(false)
        bomb.reset(@crosshair.x, @crosshair.y)
        bomb.shot = @selectedBullet
        bomb.scale.setTo(3, 3)
        @add.tween(bomb.scale).to({ x: 0.5, y: 0.5 },
          2000, Phaser.Easing.Linear.None, true)
        rotate = @add.tween(bomb).to({ angle: 720 }, 2000)
        rotate.onComplete.add( ->
          t = @game.state.getCurrentState()
          bullets = t.bullets[t.BULLET_TYPES.indexOf(@shot)]
          angle = Math.random() * 2 * Math.PI
          for i in [0..4]
            b = bullets.getFirstExists(false)
            break unless b?
            b.reset(@x, @y)
            b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5)) * 200
            b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5)) * 200
          for i in [0..4]
            b = bullets.getFirstExists(false)
            break unless b?
            b.reset(@x, @y)
            b.body.velocity.x = Math.cos(
              angle + (i * Math.PI * 2 / 5 + Math.PI / 5)) * 200
            b.body.velocity.y = Math.sin(
              angle + (i * Math.PI * 2 / 5 + Math.PI / 5)) * 200
          @kill()
          t.bombSFX.play()
        , bomb)
        rotate.start()

      @energy-= energyReq
      @adjustEnergyBar()

  turretFire: (turret, bullets) ->
    bullet = bullets.getFirstExists(false)
    return unless bullet?
    angle = @physics.arcade.angleBetween(turret, @crosshair)
    offset = Gunner.BULLET_OFFSET[@selectedBullet]
    bullet.reset(turret.x + Math.cos(angle) * offset, turret.y + Math.sin(angle) * offset)
    @physics.arcade.moveToObject(bullet, @crosshair, 200)

  createPopupOverlay: ->
    @popupBorder = @add.sprite(400, 270, 'assets', 'popup-border')
    @popupBorder.anchor.setTo(0.5, 0.5)

  checkCollision: ->
    for i in [0...Gunner.ENEMY_TYPES.length]
      for j in [0...Gunner.BULLET_TYPES.length]
        @physics.arcade.overlap(@bullets[j], @enemies[i], @collisionHandler, null, this)
      @enemies[i].forEach( (enemy) ->
        enemy.kill() if enemy.y > 530 or enemy.x < -50 or enemy.x > 850
      , this)

  spawnEnemy: (enemyIdx) ->
    return if @enemies[enemyIdx].countDead() is 0
    switch enemyIdx
      when 0
        @spawnRookies()
      when 1
        @spawnRegulars()
      when 2
        @spawnSubs()
      when 3
        @spawnVets()
      when 4
        @spawnBombers()
      when 5
        @spawnDestroyers()
      when 6
        @spawnElites()

  spawnRookies: ->
    enemy = @enemies[0].getFirstExists(false)
    if Math.random() < 0.2
      enemy.reset(0, @rnd.integerInRange(20, 480))
      enemy.body.velocity.x = @rnd.integerInRange(10, 40)
      enemy.rotation = -Math.PI / 2
    else
      enemy.reset(800, @rnd.integerInRange(20, 480))
      enemy.body.velocity.x = -(@rnd.integerInRange(40, 70))
      enemy.rotation = Math.PI / 2
    enemy.play('fly')

  spawnRegulars: ->
    enemy = @enemies[1].getFirstExists(false)
    start = @rnd.integerInRange(20, 500)
    end = @rnd.integerInRange(20, 500)
    velocity = @rnd.integerInRange(60, 90)
    if Math.random() < 0.2
      enemy.reset(0, start)
      enemy.rotation = @physics.arcade.moveToXY(
        enemy, 800, end, velocity * 0.5
      ) - Math.PI / 2
    else
      enemy.reset(800, start)
      enemy.rotation = @physics.arcade.moveToXY(
        enemy, 0, end, velocity
      ) - Math.PI / 2
    enemy.play('fly')

  spawnSubs: ->
    # try to fit the sub within subs/destroyer lanes 5 times before giving up
    tries = 0
    while tries < 5
      y = 20 + Math.random() * 480
      unless (sub for sub in @enemies[2].children when sub.alive and sub.y <= y + 32 and sub.y + 32 >= y).length > 0 or
          (dest for dest in @enemies[5].children when dest.alive and dest.y <= y + 32 and dest.y + 32 >= y).length > 0
        break
      tries++
    return if tries is 5
    enemy = @enemies[2].getFirstExists(false)
    if Math.random() < 0.5
      enemy.reset(Math.random() * 200, y)
      enemy.rotation = -Math.PI / 2
      enemy.body.velocity.x = 5 + Math.random() * 10
    else
      enemy.reset(800 - Math.random() * 200, y)
      enemy.rotation = Math.PI / 2
      enemy.body.velocity.x = -(20 + Math.random() * 20)
    enemy.body.setSize(98, 32, 0, 0)
    enemy.play('rise')

  spawnVets: ->
    enemy = @enemies[3].getFirstExists(false)
    start = @rnd.integerInRange(20, 780)
    end = @rnd.integerInRange(20, 780)
    velocity = @rnd.integerInRange(60, 120)
    if Math.random() < 0.5
      enemy.reset(start, 0)
      enemy.rotation = @physics.arcade.moveToXY(
        enemy, end, 520, velocity
      ) - Math.PI / 2
    else
      enemy.reset(start, 520)
      enemy.rotation = @physics.arcade.moveToXY(
        enemy, end, 0, velocity
      ) - Math.PI / 2
    enemy.play('fly')

  spawnBombers: ->
    enemy = @enemies[4].getFirstExists(false)
    enemy.reset(40 + Math.random() * 740, 0)
    enemy.body.velocity.y = 30 + Math.random() * 20
    enemy.play('fly')

  spawnDestroyers: ->
    # try to fit within subs/destroyer lanes 5 times before giving up
    tries = 0
    while tries < 5
      y = 20 + Math.random() * 480
      unless (sub for sub in @enemies[2].children when sub.alive and sub.y <= y + 32 and sub.y + 32 >= y).length > 0 or
          (dest for dest in @enemies[5].children when dest.alive and dest.y <= y + 32 and dest.y + 32 >= y).length > 0
        break
      tries++
    return if tries is 5

    enemy = @enemies[5].getFirstExists(false)
    if Math.random() < 0.5
      enemy.reset(-45, y)
      enemy.rotation = -Math.PI / 2
      enemy.body.velocity.x = 10 + Math.random() * 10
    else
      enemy.reset(845, y)
      enemy.rotation = Math.PI / 2
      enemy.body.velocity.x = -(5 + Math.random() * 10)

    enemy.body.setSize(174, 32, 0, 0)
    enemy.play('cruise')

  spawnElites: ->
    enemy = @enemies[6].getFirstExists(false)
    enemy.reset(10 + Math.random() * 790, 0)
    enemy.body.velocity.y = 100 + Math.random() * 200
    enemy.play('fly')

  collisionHandler: (bullet, enemy) ->
    if bullet.name is 'bullet-burst'
      bullets = @bullets[0]
      angle = Math.random() * 2 * Math.PI
      for i in [0..4]
        b = bullets.getFirstExists(false)
        break unless b?
        b.reset(bullet.x, bullet.y)
        b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5)) * 200
        b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5)) * 200
      @burstSFX.play()

    bullet.kill()
    if Math.random() < Gunner.HIT_RATE[bullet.name][enemy.name]
      i = parseInt(enemy.name.slice(5))
      explosion = switch enemy.name
        when "enemy4", "enemy5", "enemy6"
          @explosion2SFX.play()
          @explosions2.getFirstExists(false)
        else
          @explosionSFX.play()
          @explosions.getFirstExists(false)

      explosion.reset(enemy.x, enemy.y)
      explosion.body.velocity.x = enemy.body.velocity.x
      explosion.body.velocity.y = enemy.body.velocity.y
      enemy.kill()
      explosion.play('explosion', 15, false, true)

      for reward in @rewardTexts when reward.text is ' '
        reward.x = enemy.x
        reward.y = enemy.y
        reward.text = Gunner.REWARD[enemy.name]
        reward.alpha = 1
        rise = @add.tween(reward)
        rise.to({ y: enemy.y - 16 }, 250)
        fade = @add.tween(reward)
        fade.to({ y: enemy.y - 64, alpha: 0 })
        rise.chain(fade)
        fade.onComplete.add(->
          @text = ' '
        , reward)
        rise.start()
        break
      @energy += Gunner.REWARD[enemy.name]
      @adjustEnergyBar()
      @kills++
      @adjustKillBar()
      if enemy.name is 'enemy6' and @game.gameType is 'Time Attack'
        @displayEnd(true)
    else
      enemy.play('hit')
      @damageSFX.play()

  checkEnemyLevelUp: ->
    if @nextEnemyLvlUp? and @kills >= @nextEnemyLvlUp
      @levelUpEnemy(@nextEnemyLvlUp * @game.lengthMultplier)

  levelUpEnemy: (kills) ->
    return unless Gunner.ENEMY_LVL_CHART[kills]?
    action = Gunner.ENEMY_LVL_CHART[kills].action
    switch action[0]
      when "unlock"
        @unlockEnemy(action[1], action[2], action[3])
      when "setSpawnRate"
        @time.events.remove @enemySpawners[action[1]]
        @enemySpawners[action[1]] = @game.time.events.loop(action[2], @spawnEnemy, this, action[1])
        @enemyLvlUpText.text = "Reinforcements for #{Gunner.ENEMY_TYPES[action[1]]}s incoming!"
        @setLvlUpExpire()
      when "setMaxCount"
        @setMaxCount(action[1], action[2])
    Gunner.center(@enemyLvlUpText)

    @previousLvlUp = @nextEnemyLvlUp if @nextEnemyLvlUp?
    @nextEnemyLvlUp = Gunner.ENEMY_LVL_CHART[kills].next
    if @nextEnemyLvlUp?
      @nextEnemyLvlUp /= @game.lengthMultplier
      @adjustKillBar()
    else
      @endScore = Gunner.ENEMY_LVL_CHART[kills].end / @game.lengthMultplier
      if @game.gameType is 'Time Attack'
        @endText = @add.text 400, 50, "Destroy an elite fighter or reach #{@endScore} kills to win", { font: '14px Army Wide', fill: '#fff' }
        @endText.anchor.setTo(0.5, 0.5)

  unlockEnemy: (enemyIdx, spawnRate, maxCount) ->
    @enemySpawners[enemyIdx] = @game.time.events.loop(spawnRate, @spawnEnemy, this, enemyIdx)
    @enemies[enemyIdx].removeAll(true)
    @enemies[enemyIdx].createMultiple(maxCount, 'assets', 'enemy' + enemyIdx + '-0', false)
    @enemies[enemyIdx].setAll('name', 'enemy' + enemyIdx)
    @setSpriteInfo(enemyIdx)
    @enemyLvlUpText.text = Gunner.ENEMY_TYPES[enemyIdx] + "s spotted!"
    @setLvlUpExpire()

  setMaxCount: (enemyIdx, maxCount) ->
    current = @enemies[enemyIdx].children.length
    if current < maxCount
      @enemies[enemyIdx].createMultiple(maxCount - current, 'assets', 'enemy' + enemyIdx + '-0', false)
      @enemies[enemyIdx].setAll('name', 'enemy' + enemyIdx)
    @setSpriteInfo(enemyIdx)
    @enemyLvlUpText.text = "More #{Gunner.ENEMY_TYPES[enemyIdx] }s spotted!"
    @setLvlUpExpire()

  setLvlUpExpire: ->
    @time.events.add(Phaser.Timer.SECOND * 5, ->
      @enemyLvlUpText.text = ""
    , this)

  setSpriteInfo: (enemyIdx) ->
    switch enemyIdx
      when 0, 1, 3, 4, 6
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('hit', [
            'enemy' + enemyIdx + '-3',
            'enemy' + enemyIdx + '-2',
            'enemy' + enemyIdx + '-3',
            'enemy' + enemyIdx + '-2'
          ], 20, false)
          enemy.animations.add('fly',
            Phaser.Animation.generateFrameNames(
              'enemy' + enemyIdx + '-', 0, 2, '', 1),
            20, true)
          enemy.events.onAnimationComplete.add( (enemy) ->
            enemy.play('fly')
          , this)
        , this)
      when 2
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('rise', [
              'enemy2-1',
              'enemy2-2',
              'enemy2-3',
              'enemy2-4',
              'enemy2-5',
              'enemy2-0'
            ], 10, false)
          enemy.animations.add('hit', [
              'enemy2-6',
              'enemy2-0',
              'enemy2-6',
              'enemy2-0',
              'enemy2-6',
              'enemy2-0'
            ], 10, false)
          enemy.animations.add('cruise', [ 0 ], 20, true)
        , this)
      when 5
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('hit', [
              'enemy5-2',
              'enemy5-0',
              'enemy5-2',
              'enemy5-1'
            ], 20, false)
          enemy.animations.add('cruise', [ 'enemy5-0', 'enemy5-1' ], 20, true)
          enemy.events.onAnimationComplete.add( (enemy) ->
            enemy.play('cruise')
          , this)
        , this)

    @enemies[enemyIdx].setAll('anchor.x', 0.5)
    @enemies[enemyIdx].setAll('anchor.y', 0.5)

  pauseGame: ->
    @game.paused = true

    @createPopupOverlay()

    @pausedText = @add.text(400, 150, 'Game Paused',
      { font: '64px Army Wide', fill: '#fff' }
    )
    @pausedText.anchor.setTo(0.5, 0.5)

    @typeHeaderText = @add.text(400, 220, "Game Type:",
      { font: '18px sans-serif', fill: '#fff' }
    )
    @typeHeaderText.anchor.setTo(0.5, 0.5)

    @gameTypeText = @add.text(400, 255, "#{Gunner.GAME_LENGTH_TEXT[@game.lengthMultplier]} #{@game.gameType}",
      { font: '40px sans-serif', fill: '#fff' }
    )
    @gameTypeText.anchor.setTo(0.5, 0.5)

    @previousRecordText = @add.text(400, 290, '',
      { font: '16px sans-serif', fill: '#fff' }
    )
    @previousRecordText.anchor.setTo(0.5, 0.5)

    if @game.gameType is 'Time Attack'
      bestTime = Store.get("bestTime-#{@game.lengthMultplier}")
      @previousRecordText.text = "(previous record: #{Gunner.timeDisplay(parseInt(bestTime))})" if bestTime?
    else
      highScore = Store.get("survival-#{@game.lengthMultplier}")
      @previousRecordText.text = "(previous record: #{highScore} kills)" if highScore?
    @unpauseText = @add.text(400, 440, "Click/tap outside this box to resume game",
      { font: '18px Army Wide', fill: '#fff' }
    )
    @unpauseText.anchor.setTo(0.5, 0.5)
    @playAgain = @add.text(400, 350, "Restart Game",
      { font: '24px Army Wide', fill: '#fff' }
    )
    @playAgain.anchor.setTo(0.5, 0.5)

    @mainMenu = @add.text(400, 390, "Back to Main Menu",
      { font: '24px Army Wide', fill: '#fff' }
    )
    @mainMenu.anchor.setTo(0.5, 0.5)

    @input.onDown.add( (e) ->
      return unless @game.paused
      if e.x > 100 and e.x < 700 and e.y > 70 and e.y < 470
        if e.x > 290 and e.x < 510 and e.y > 340 and e.y < 370
          @delayedAction = 'restart'
          @resumeGame()
        if e.x > 250 and e.x < 550 and e.y > 370 and e.y < 400
          @delayedAction = 'quit'
          @resumeGame()
      else
        @resumeGame()
    , this)

  resumeGame: ->
    @popupBorder.destroy()
    @pausedText.destroy()
    @typeHeaderText.destroy()
    @gameTypeText.destroy()
    @unpauseText.destroy()
    @previousRecordText.destroy()
    @playAgain.destroy()
    @mainMenu.destroy()
    @game.paused = false

  displayEnd: (win) ->
    return if @gameEnd
    @gameEnd = true

    if @game.gameType is 'Time Attack'
      @gameTimer.pause()
    else
      @drainCounter.destroy()
      @drainText.destroy()
      @timeText.text = ''

    @createPopupOverlay()

    @add.text(400, 150, (if win then "YOU WIN" else "GAME OVER"),
      { font: '72px Army Wide', fill: '#fff' }
    ).anchor.setTo(0.5, 0.5)
    #@add.text(400, 225, "New Best Time!",
    #  { font: '28px Army Wide', fill: '#fff' }
    #).anchor.setTo(0.5, 0.5)
    <%#@add.text(400, 225, "You beat the game in",%>
      <%#{ font: '22px Army Wide', fill: '#fff' }%>
    <%#).anchor.setTo(0.5, 0.5)%>
    <%#@add.text(400, 260, Gunner.timeDisplay(@gameTimer.ms),%>
      <%#{ font: '32px Army Wide', fill: '#fff' }%>
    <%#).anchor.setTo(0.5, 0.5)%>
    <%#@timeText.text = ""%>

    <%#@add.text(400, 290, "(previous record: #{Gunner.timeDisplay(@gameTimer.ms)})",%>
      <%#{ font: '18px sans-serif', fill: '#fff' }%>
    <%#).anchor.setTo(0.5, 0.5)%>

    playAgain = @add.text(530, 330, "Play Again",
      { font: '28px Army Wide', fill: '#fff' }
    )
    playAgain.anchor.setTo(0.5, 0.5)
    playAgain.inputEnabled = true
    playAgain.events.onInputDown.add( ->
      @restartGame()
    , this)

    mainMenu = @add.text(270, 330, "Main Menu",
      { font: '28px Army Wide', fill: '#fff' }
    )
    mainMenu.anchor.setTo(0.5, 0.5)
    mainMenu.inputEnabled = true
    mainMenu.events.onInputDown.add( ->
      @quitGame()
    , this)

    url = encodeURIComponent("http://datenshizero.github.io/gunner/")
    ogUrl = encodeURIComponent("<%= image_path 'opengraph.png' %>")
    text = encodeURIComponent("Play Gunner, a WWII themed HTML5 game where you destroy waves of enemy planes and ships")
    if @game.gameType is 'Time Attack'
      text = encodeURIComponent("I beat the #{Gunner.GAME_LENGTH_TEXT[@game.lengthMultplier]} #{@game.gameType} mode of Gunner in #{Gunner.timeDisplay(@gameTimer.ms)}. Try beating my time!")
    else
      text = encodeURIComponent("I destroyed #{@kills} enemies in the #{Gunner.GAME_LENGTH_TEXT[@game.lengthMultplier]} #{@game.gameType} mode of Gunner before dying. Try beating my score!")

    fullUrl = "https://twitter.com/intent/tweet?url=#{url}&text=#{text}"
    @addIcon 200, 403, 'twitter', fullUrl
    fullUrl ="https://www.facebook.com/dialog/share?app_id=488047311326879&href=#{url}&display=page&redirect_uri=https://facebook.com"
    @addIcon 300, 403, 'facebook', fullUrl
    fullUrl = "http://www.tumblr.com/share/link?url=#{url}&name=Gunner&description=#{text}"
    @addIcon 400, 403, 'tumblr', fullUrl
    fullUrl = "http://www.pinterest.com/pin/create/button/?url=#{url}&media=#{ogUrl}&description=#{text}"
    @addIcon 500, 403, 'pinterest', fullUrl
    fullUrl = "https://plus.google.com/share?url=#{url}"
    @addIcon 600, 403, 'gplus', fullUrl

    if @game.gameType is 'Time Attack'
      if win
        bestTime = Store.get("bestTime-#{@game.lengthMultplier}")
        if !bestTime? or parseInt(bestTime) > @gameTimer.ms
          @add.text(400, 225, "New Best Time!",
            { font: '32px Army Wide', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)
          @add.text(400, 260, Gunner.timeDisplay(@gameTimer.ms),
            { font: '32px Army Wide', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)
          Store.set("bestTime-#{@game.lengthMultplier}", @gameTimer.ms)
      else
        bestTime = Store.get("bestTime-#{@game.lengthMultplier}")
        if bestTime?
          @add.text(400, 270,
            "(previous record: #{Gunner.timeDisplay(parseInt(bestTime))})",
            { font: '18px sans-serif', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)
    else
      highScore = Store.get("survival-#{@game.lengthMultplier}")
      if !(highScore) or @kills > parseInt(highScore)
        @add.text(400, 225, "New High Score!",
          { font: '32px Army Wide', fill: '#fff' }
        ).anchor.setTo(0.5, 0.5)
        @add.text(400, 260, "#{@kills} kills",
          { font: '32px Army Wide', fill: '#fff' }
        ).anchor.setTo(0.5, 0.5)
        Store.set("survival-#{@game.lengthMultplier}", @kills)
        
      if highScore?
          @add.text(400, 290,
            "(previous record: #{highScore})",
            { font: '18px sans-serif', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)

  addIcon: (x, y, filename, url) ->
    icon = @add.sprite(x, y, 'assets', filename)
    icon.anchor.setTo(0.5, 0.5)
    icon.inputEnabled = true
    icon.events.onInputDown.add( ->
      win = window.open(url, '_blank')
      win.focus()
    , this)
    @shareImages.push icon

  restartGame: ->
    @destroyResources()
    @game.state.start('Game')

  quitGame: ->
    @destroyResources()
    @game.state.start('MainMenu')

  destroyResources: ->
    @land.destroy()
    if @game.gameType is 'Time Attack'
      @gameTimer.destroy()
    @crosshair.destroy()
    enemy.destroy() for enemy in @enemies
    @explosions.destroy()
    @explosions2.destroy()
    bullet.destroy() for bullet in @bullets
    @bombs.destroy()
    @fireSFX.destroy()
    @burstSFX.destroy()
    @bombSFX.destroy()
    @explosionSFX.destroy()
    @explosion2SFX.destroy()
    @damageSFX.destroy()
    @deck.destroy()
    @energyContainer.destroy()
    bar.destroy() for bar in @energyFills
    @killContainer.destroy()
    @killFill.destroy()
    turret.destroy() for k, turret of @turrets
    turret.destroy() for k, turret of @leftTurrets
    turret.destroy() for k, turret of @rightTurrets
    button.destroy() for k, button of @bbtn
    button.destroy() for k, button of @bbtnd
    @soundIcon.destroy()
    @optionsIcon.destroy()
    @timeText.destroy()
    @energyText.destroy()
    @killText.destroy()
    @enemyLvlUpText.destroy()
    image.destroy() for image in @shareImages
    @gameEnd = false

Gunner.Game = Game
