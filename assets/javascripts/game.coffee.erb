Store = new Persist.Store('Gunner Scores')

class Boot
  constructor: (game) ->
  preload: ->
    @load.image('preloaderBar', '<%= image_path('preloader_bar.png') %>')
  create: ->
    @input.maxPointers = 1
    @stage.disableVisibilityChange = false
    if @game.device.desktop
      @scale.scaleMode = Phaser.ScaleManager.SHOW_ALL
      @scale.minWidth = 480
      @scale.minHeight = 260
      @scale.maxWidth = 800
      @scale.maxHeight = 600
      @scale.pageAlignHorizontally = true
      @scale.pageAlignVertically = true
      @scale.setScreenSize true
    else
      @scale.scaleMode = Phaser.ScaleManager.SHOW_ALL
      @scale.minWidth = 480
      @scale.minHeight = 260
      @scale.maxWidth = 800
      @scale.maxHeight = 600
      @scale.pageAlignHorizontally = true
      @scale.pageAlignVertically = true
      @scale.forceOrientation true, false
      @scale.hasResized.add @gameResized, this
      @scale.enterIncorrectOrientation.add @enterIncorrectOrientation, this
      @scale.leaveIncorrectOrientation.add @leaveIncorrectOrientation, this
      @scale.setScreenSize true
    @state.start('Preloader')

  gameResized: (width, height) ->
    # This could be handy if you need to do any extra processing if the game resizes.
    # A resize could happen if for example swapping orientation on a device.
    
  enterIncorrectOrientation: ->
    @game.orientated = false
    document.getElementById("orientation").style.display = "block"
    return

  leaveIncorrectOrientation: ->
    @game.orientated = true
    document.getElementById("orientation").style.display = "none"
    return

class Preloader
  constructor: (game) ->
  preload: ->
    @loadingText = @add.text(400, 270, "Loading", { font: '30px "Army Wide", monospace', fill: '#fff' })
    @loadingText.anchor.setTo(0.5, 0.5)
    @preloaderBar = @add.sprite(400, 300, 'preloaderBar')
    @preloaderBar.anchor.setTo(0.5, 0.5)

    @load.setPreloadSprite(@preloaderBar)

    @load.atlas('assets', '<%= image_path('atlas.png') %>', '<%= image_path('atlas.json') %>')
    @load.image('sea', '<%= image_path('sea.png') %>')

    @load.audio('fire', ['<%= audio_path("fire.wav") %>'])
    @load.audio('burst', ['<%= audio_path("burst.wav") %>'])
    @load.audio('bomb', ['<%= audio_path("bomb.wav") %>'])
    @load.audio('explosion', ['<%= audio_path("explosion.wav") %>'])
    @load.audio('explosion2', ['<%= audio_path("explosion2.wav") %>'])
    @load.audio('damage', ['<%= audio_path("damage.wav") %>'])

  create: ->
    @state.start('MainMenu')

class MainMenu
  create: ->
    @stage.backgroundColor = '#2d2d2d'
    @titleText = @add.text(400, 150, "Gunner", { font: '128px "Army Wide", monospace', fill: '#fff' })
    @titleText.anchor.setTo(0.5, 0.5)

    gl = Store.get('gameLength')
    @game.lengthMultplier = if gl? then parseInt(gl) else 2
    gt = Store.get('gameType')
    @game.gameType = if gt? then gt else 'Time Attack'

    @menuTexts = {}
    @setupTopLevel()


  addText: (text, x, y, selected, small) ->
    @menuTexts[text] = @add.text(x, y, text,
      {
        font: "#{ if small then 26 else 32 }px 'Army Wide', monospace",
        fill: (if selected then '#fff' else '#888')
      })
    @menuTexts[text].anchor.setTo(0.5, 0.5)
    @menuTexts[text].inputEnabled = true
    @menuTexts[text].events.onInputDown.add(@menuSelect, @menuTexts[text])


  menuSelect: ->
    state = @game.state.getCurrentState()
    switch @text
      when "Back to Main Menu"
        state.setupTopLevel()
      when "Play Game"
        state.setupOptions()
      when "Time Attack"
        @game.gameType = 'Time Attack'
        state.highlightType()
      when "Survival"
        @game.gameType = 'Survival'
        state.highlightType()
      when "Quick"
        @game.lengthMultplier = 5
        state.highlightLength()
      when "Normal"
        @game.lengthMultplier = 2
        state.highlightLength()
      when "Extended"
        @game.lengthMultplier = 1
        state.highlightLength()
      when "Start Game"
        @game.lengthMultplier = 2 unless @game.lengthMultplier?
        Store.set('gameLength', @game.lengthMultplier)
        @game.gameType = 'time atttack' unless @game.gameType?
        Store.set('gameType', @game.gameType)
        @game.state.start('Game')
      when "High Scores"
        state.displayHighScores()

  setupTopLevel: ->
    text.destroy() for key, text of @menuTexts
    @addText 'Play Game', 400, 350, true
    @addText 'How To Play', 400, 390, false
    @addText 'High Scores', 400, 430, false
    @addText 'Credits', 400, 470, false
    @game.menuIndex = 0

  setupOptions: ->
    text.destroy() for key, text of @menuTexts

    @addText 'Game Type', 230, 300, true
    @addText 'Time Attack', 230, 350, false, true
    @addText 'Survival', 230, 380, false, true
    @addText 'Game Length', 570, 300, true
    @addText 'Quick', 570, 340, false, true
    @addText 'Normal', 570, 370, false, true
    @addText 'Extended', 570, 400, false, true
    @highlightLength()
    @highlightType()
    @addText 'Start Game', 400, 470, true
    @addText 'Back to Main Menu', 400, 510, false, true

  highlightType: ->
    @menuTexts["Time Attack"].fill = "#888"
    @menuTexts["Survival"].fill = "#888"
    switch @game.gameType
      when 'Time Attack'
        @menuTexts["Time Attack"].fill = "#fff"
      when 'Survival'
        @menuTexts["Survival"].fill = "#fff"

  highlightLength: ->
    @menuTexts["Quick"].fill = "#888"
    @menuTexts["Normal"].fill = "#888"
    @menuTexts["Extended"].fill = "#888"
    switch @game.lengthMultplier
      when 5
        @menuTexts["Quick"].fill = "#fff"
      when 2
        @menuTexts["Normal"].fill = "#fff"
      when 1
        @menuTexts["Extended"].fill = "#fff"

  displayHighScores: ->
    text.destroy() for key, text of @menuTexts
    @addText ' Time Attack ', 230, 300, true
    @addText ' Survival ', 570, 300, true
    @addText 'Quick: ' +
      if Store.get("bestTime-5")?
        @timeDisplay(parseInt(Store.get("bestTime-5")))
      else
        'n/a'
      , 230, 340, true, true
    @addText 'Normal: ' +
      if Store.get("bestTime-2")?
        @timeDisplay(parseInt(Store.get("bestTime-2")))
      else
        'n/a'
      , 230, 370, true, true
    @addText 'Extended: ' +
      if Store.get("bestTime-1")?
        @timeDisplay(parseInt(Store.get("bestTime-5")))
      else
        'n/a'
      , 230, 400, true, true

    @addText ' Quick: ' +
      if Store.get("survival-5")?
        Store.get("survival-5") + ' kills '
      else
        'n/a '
      , 570, 340, true, true
    @addText ' Normal: ' +
      if Store.get("survival-2")?
        Store.get("survival-2") + ' kills '
      else
        'n/a '
      , 570, 370, true, true
    @addText ' Extended: ' +
      if Store.get("survival-1")?
        Store.get("survival-1") + ' kills '
      else
        'n/a '
      , 570, 400, true, true
    @addText 'Back to Main Menu', 400, 510, false, true

  timeDisplay:(ms) ->
    minutes = Math.floor(ms / 60000)
    seconds = ms - (minutes * 60000)
    ms = seconds % 1000
    seconds = Math.floor(seconds / 1000)
    "#{minutes}' #{('00' + seconds).slice(-2)}\" #{('000' + ms).slice(-3)}"

class Game
  @RKE_FIGHTER = 0
  @REG_FIGHTER = 1
  @SUBMARINE = 2
  @VET_FIGHTER = 3
  @BOMBER = 4
  @DESTROYER = 5
  @ELT_FIGHTER = 6

  constructor: (game) ->

  ENEMY_LVL_CHART:
    0:
      action: ["unlock", @RKE_FIGHTER, 1000, 20]
      next: 20
    20:
      action: ["setSpawnRate", @RKE_FIGHTER, 600]
      next: 50
    50:
      action: ["unlock", @REG_FIGHTER, 5000, 10]
      next: 100
    100:
      action: ["setMaxCount", @RKE_FIGHTER, 30]
      next: 150
    150:
      action: ["setSpawnRate", @REG_FIGHTER, 2500]
      next: 200
    200:
      action: ["setSpawnRate", @RKE_FIGHTER, 400]
      next: 300
    300:
      action: ["setSpawnRate", @REG_FIGHTER, 1700]
      next: 400
    400:
      action: ["setSpawnRate", @RKE_FIGHTER, 300]
      next: 500
    500:
      action: ["setMaxCount", @RKE_FIGHTER, 40]
      next: 750
    750:
      action: ["unlock", @SUBMARINE, 10000, 10]
      next: 1000
    1000:
      action: ["setSpawnRate", @REG_FIGHTER, 1200]
      next: 1250
    1250:
      action: ["setSpawnRate", @RKE_FIGHTER, 250]
      next: 1500
    1500:
      action: ["setMaxCount", @REG_FIGHTER, 20]
      next: 1750
    1750:
      action: ["setSpawnRate", @RKE_FIGHTER, 200]
      next: 2000
    2000:
      action: ["unlock", @VET_FIGHTER, 10000, 10]
      next: 2250
    2250:
      action: ["setMaxCount", @RKE_FIGHTER, 60]
      next: 2500
    2500:
      action: ["setMaxCount", @REG_FIGHTER, 30]
      next: 2750
    2750:
      action: ["setSpawnRate", @VET_FIGHTER, 7500]
      next: 3000
    3000:
      action: ["setSpawnRate", @SUBMARINE, 8000]
      next: 3250
    3250:
      action: ["setMaxCount", @RKE_FIGHTER, 80]
      next: 3500
    3500:
      action: ["setSpawnRate", @REG_FIGHTER, 800]
      next: 3750
    3750:
      action: ["setSpawnRate", @SUBMARINE, 7000]
      next: 4000
    4000:
      action: ["unlock", @BOMBER, 10000, 10]
      next: 4250
    4250:
      action: ["setSpawnRate", @VET_FIGHTER, 5000]
      next: 4500
    4500:
      action: ["setSpawnRate", @RKE_FIGHTER, 150]
      next: 4750
    4750:
      action: ["setMaxCount", @RKE_FIGHTER, 120]
      next: 5000
    5000:
      action: ["setSpawnRate", @BOMBER, 8000]
      next: 5250
    5250:
      action: ["setSpawnRate", @REG_FIGHTER, 700]
      next: 5500
    5500:
      action: ["setMaxCount", @REG_FIGHTER, 50]
      next: 5750
    5750:
      action: ["setSpawnRate", @VET_FIGHTER, 4000]
      next: 6000
    6000:
      action: ["unlock", @DESTROYER, 20000, 2]
      next: 8000
    8000:
      action: ["setSpawnRate", @DESTROYER, 15000]
      next: 10000
    10000:
      action: ["unlock", @ELT_FIGHTER, 30000, 1]
      next: null
      end: 15000

  BULLET_TYPES: ['small', 'large', 'burst']
  FIRING_TYPES: ['single', 'triple', 'bomb']

  ENEMY_TYPES: ['Rookie Fighter', 'Regular Fighter', 'Submarine', 'Veteran Fighter', 'Bomber', 'Destroyer', 'Elite Fighter']

  ENERGY_REQ:
    small: 1
    large: 3
    burst: 8
    single: 1
    triple: 3
    bomb: 10

  ENERGY_BARS: ['red', 'yellow', 'green', 'blue']
  ENERGY_TIERS: [25, 100, 500, 2500]

  BULLET_OFFSET:
    small: 20
    large: 30
    burst: 25

  FIRE_RATE:
    small: 100
    large: 150
    burst: 250
    single: 1
    triple: 2.5
    bomb: 5

  HIT_RATE:
    "bullet-small":
      enemy0: 0.66
      enemy1: 0.30
      enemy2: 0.05
      enemy3: 0.05
      enemy4: 0.009
      enemy5: 0.0055
      enemy6: 0.002
    "bullet-large":
      enemy0: 1
      enemy1: 0.9
      enemy2: 0.2
      enemy3: 0.12
      enemy4: 0.03
      enemy5: 0.019
      enemy6: 0.008
    "bullet-burst":
      enemy0: 1
      enemy1: 1
      enemy2: 0.35
      enemy3: 0.15
      enemy4: 0.05
      enemy5: 0.025
      enemy6: 0.01

  REWARD:
    enemy0: 2
    enemy1: 5
    enemy2: 25
    enemy3: 50
    enemy4: 100
    enemy5: 200
    enemy6: 500

  GAME_LENGTH_TEXT:
    5: 'Quick'
    2: 'Normal'
    1: 'Extended'

  #
  # FUNCTIONS
  # 
  preload: ->
    @stage.disableVisibilityChange = false
    return

  create: ->
    @canFire = true
    @enemySpawners = {}
    @enemyLvlUpExpire = 0
    @energy = 1000
    @kills = 0
    @lastSelectedBullet = null
    @lastSelectedFire = null
    @selectedBullet = 'small'
    @selectedFire = 'single'
    @previousLvlUp = 0
    @nextEnemyLvlUp = null
    @endScore = null

    @land = @add.tileSprite(0, 0, 800, 530, 'sea')
    @land.autoScroll 0, 30
    @stage.backgroundColor = '#333'

    if @game.gameType is 'Time Attack'
      @gameTimer = @time.create(false)
      @gameTimer.start()
    else
      @drain = 1
      @drainCounter = @game.time.create(false)
      @drainCounter.loop(60000, ->
        @energy -= @drain * 5 * @game.lengthMultplier
        @drain++
      , this)
      @drainCounter.start()
    @setupEnemies()
    @setupExplosions()

    @crosshair = @add.sprite(400, 300, 'assets', 'crosshair')
    @crosshair.anchor.setTo(0.5, 0.5)
    @crosshair.speed = 300
    @physics.enable(@crosshair, Phaser.Physics.ARCADE)
    @crosshair.body.collideWorldBounds = true
    @crosshair.body.setSize 1, 1, 0, 0
    @cursors = @input.keyboard.createCursorKeys()

    @setupBullets()
    @setupDeck()
    @setupAudio()
    @setupText()

    @levelUpEnemy(0)

    return

  update: ->
    @checkEnemyLevelUp()

    @toggleBullets()
    @fire() if (@input.activePointer.isDown and @input.activePointer.worldY < 520) or @input.keyboard.isDown(Phaser.Keyboard.Z)

    @checkCollision()

    if @energy <= 0 and (true for bullets in @bullets when bullets.countLiving() > 0).length == 0 and (@bombs.countLiving() == 0)
      @displayEnd(false)

  render: ->
    unless @gameEnd
      if @game.gameType is 'Time Attack'
        @timeText.text = @timeDisplay(@gameTimer.ms)
      else
        @timeText.text = @timeDisplay(@drainCounter.duration)

    return

  timeDisplay:(ms) ->
    minutes = Math.floor(ms / 60000)
    seconds = ms - (minutes * 60000)
    ms = seconds % 1000
    seconds = Math.floor(seconds / 1000)
    "#{minutes}' #{('00' + seconds).slice(-2)}\" #{('000' + ms).slice(-3)}"

  # 
  # CREATE functions
  #
  setupEnemies: ->
    @enemies = []
    @enemiesGroup = @add.group()
    for i in [0...@ENEMY_TYPES.length]
      enemies = @add.group()
      enemies.enableBody = true
      enemies.physicsBodyType = Phaser.Physics.ARCADE
      @enemies.push(enemies)

    for i in [5, 2, 6, 4, 3, 1, 0]
      @enemiesGroup.add(@enemies[i])

  setupExplosions: ->
    @explosions = @add.group()
    @explosions.enableBody = true
    @explosions.physicsBodyType = Phaser.Physics.ARCADE
    @explosions.createMultiple(200, 'assets')
    @explosions.forEach(((explosion) ->
      explosion.animations.add 'explosion', Phaser.Animation.generateFrameNames('explosion-', 0, 5, '', 1)
    ), this)
    @explosions.setAll('anchor.x', 0.5)
    @explosions.setAll('anchor.y', 0.5)

    @explosions2 = @add.group()
    @explosions2.enableBody = true
    @explosions2.physicsBodyType = Phaser.Physics.ARCADE
    @explosions2.createMultiple(10, 'assets')
    @explosions2.forEach(((explosion) ->
      explosion.animations.add 'explosion', Phaser.Animation.generateFrameNames('explosion2-', 0, 6, '', 1)
    ), this)
    @explosions2.setAll('anchor.x', 0.5)
    @explosions2.setAll('anchor.y', 0.5)

  setupBullets: ->
    @bullets = []
    for bullet in @BULLET_TYPES
      bullets = @add.group()
      bullets.enableBody = true
      bullets.physicsBodyType = Phaser.Physics.ARCADE
      # console.log 'bullet-' + bullet
      bullets.createMultiple(100, 'assets', 'bullet-' + bullet, false)
      bullets.setAll('name', 'bullet-' + bullet)
      bullets.setAll('anchor.x', 0.5)
      bullets.setAll('anchor.y', 0.5)
      bullets.setAll('outOfBoundsKill', true)
      bullets.setAll('checkWorldBounds', true)
      @bullets.push bullets

    @bombs = @add.group()
    @bombs.createMultiple(10, 'assets', 'bomb')
    @bombs.setAll('anchor.x', 0.5)
    @bombs.setAll('anchor.y', 0.5)

  setupAudio: ->
    @fireSFX = @add.audio('fire')
    @burstSFX = @add.audio('burst')
    @bombSFX = @add.audio('bomb')
    @explosionSFX = @add.audio('explosion')
    @explosion2SFX = @add.audio('explosion2')
    @damageSFX = @add.audio('damage')

  setupDeck: ->
    @deck = @add.sprite(0, 520, 'assets', 'deck')
    @energyContainer = @add.sprite(400, 550, 'assets', 'energy-container')
    @energyContainer.anchor.setTo 0.5, 0.5

    @energyFills = []
    for i in @ENERGY_BARS
      bar = @add.sprite(302, 550, 'assets', 'energy-' + i)
      bar.anchor.setTo 0, 0.5
      bar.kill()
      @energyFills.push bar

    @killContainer = @add.sprite(400, 580, 'assets', 'kill-container')
    @killContainer.anchor.setTo 0.5, 0.5
    @killFill = @add.sprite(272, 580, 'assets', 'kill-fill')
    @killFill.anchor.setTo 0, 0.5
    @killFill.scale.setTo 0, 1

    @turrets = {}
    @leftTurrets = {}
    @rightTurrets = {}
    @bbtn = {}
    @bbtnd = {}
    # toggle bullet types
    for i in @FIRING_TYPES
      @bbtnd[i] = @add.sprite(545 + (@FIRING_TYPES.indexOf(i)) * 85, 535, 'assets', 'bbtnd-' + i)
      @bbtnd[i].inputEnabled = true
      @bbtn[i] = @add.sprite(545 + (@FIRING_TYPES.indexOf(i)) * 85, 535,'assets',  'bbtn-' + i)
      @bbtn[i].inputEnabled = true
      @bbtnd[i].kill()

      ((spriteGroup, disabledSpriteGroup, i, game) ->
        spriteGroup.events.onInputDown.add( () ->
          game.selectedFire = i
        , this)
        disabledSpriteGroup.events.onInputDown.add( () ->
          game.selectedFire = i
        , this)
      )(@bbtn[i], @bbtnd[i], i, this)

    for i in @BULLET_TYPES
      @bbtnd[i] = @add.sprite(5 + (@BULLET_TYPES.indexOf(i)) * 85, 535, 'assets', 'bbtnd-' + i)
      @bbtnd[i].inputEnabled = true
      @bbtn[i] = @add.sprite(5 + (@BULLET_TYPES.indexOf(i)) * 85, 535, 'assets', 'bbtn-' + i)
      @bbtn[i].inputEnabled = true
      @bbtnd[i].kill()

      # closure required for toggle
      ((spriteGroup, disabledSpriteGroup, i, game) ->
        spriteGroup.events.onInputDown.add( () ->
          game.selectedBullet = i
        , this)
        disabledSpriteGroup.events.onInputDown.add( () ->
          game.selectedBullet = i
        , this)
      )(@bbtn[i], @bbtnd[i], i, this)


    for i in @BULLET_TYPES
      @turrets[i] = @add.sprite(400, 525, 'assets', 'turret-' + i)
      @turrets[i].anchor.setTo(0.3, 0.5)
      @leftTurrets[i] = @add.sprite(300, 525, 'assets', 'turret-' + i)
      @leftTurrets[i].anchor.setTo(0.3, 0.5)
      @rightTurrets[i] = @add.sprite(500, 525, 'assets', 'turret-' + i)
      @rightTurrets[i].anchor.setTo(0.3, 0.5)

    @soundIcon = @add.sprite(280, 550, 'assets', 'sound-0')
    @soundIcon.anchor.setTo(0.5, 0.5)
    @soundIcon.animations.add('on', ['sound-0'])
    @soundIcon.animations.add('off', ['sound-1'])
    @soundIcon.play('on')
    @soundIcon.inputEnabled = true
    @soundIcon.events.onInputDown.add( ->
      if @sound.mute
        @sound.mute = false
        @soundIcon.play('on')
      else
        @sound.mute = true
        @soundIcon.play('off')
    , this)

    @optionsIcon = @add.sprite(520, 550, 'assets', 'options')
    @optionsIcon.anchor.setTo(0.5, 0.5)
    @optionsIcon.inputEnabled = true
    @optionsIcon.events.onInputDown.add( ->
      unless @game.paused
        @pauseGame()
    , this)

  setupText: ->
    if @game.gameType is 'Time Attack'
      @timeText = @add.text(400, 30, '', { font: '28px sans-serif', fill: '#fff' })
    else
      @timeText = @add.text(400, 50, '', { font: '28px sans-serif', fill: '#fff' })
      @drainText = @add.text(400, 20, "next energy drain (#{-5 * @drain * @game.lengthMultplier}) in:", { font: '14px Army Wide', fill: '#fff',  })
      @drainText.anchor.setTo(0.5, 0.5)

    @timeText.anchor.setTo(0.5, 0.5)


    @energyText = @add.text(400, 550, 'Energy: ' + @energy, { font: '14px Army Wide', fill: '#fff',  })
    @energyText.anchor.setTo(0.5, 0.5)
    @adjustEnergyBar()

    @killText = @add.text(400, 580, "Kills: 0", { font: '14px Army Wide', fill: '#fff' })
    @killText.anchor.setTo(0.5, 0.5)

    @enemyLvlUpText = @add.text(400, 250, "", { font: '20px Army Wide', fill: '#fff' })
    @enemyLvlUpText.anchor.setTo(0.5, 0.5)

  adjustEnergyBar: ->
    @energyText.text = 'Energy: ' + @energy
    if @energy < 0
      @energyFills[0].kill() if @energyFills[0].alive
    if @energy <= @ENERGY_TIERS[0]
      @energyFills[1].kill() if @energyFills[1].alive
    if @energy <= @ENERGY_TIERS[1]
      @energyFills[2].kill() if @energyFills[2].alive
    if @energy <= @ENERGY_TIERS[2]
      @energyFills[3].kill() if @energyFills[3].alive

    return if @energy < 0

    @energyFills[0].revive() unless @energyFills[0].alive
    if @energy <= @ENERGY_TIERS[0]
      @energyFills[0].scale.setTo((196 * @energy / @ENERGY_TIERS[0]), 1)
      return
    @energyFills[0].scale.setTo(196, 1)

    @energyFills[1].revive() unless @energyFills[1].alive
    if @energy <= @ENERGY_TIERS[1]
      @energyFills[1].scale.setTo(196 * (@energy - @ENERGY_TIERS[0]) / (@ENERGY_TIERS[1] - @ENERGY_TIERS[0]), 1)
      return
    @energyFills[1].scale.setTo(196, 1)

    @energyFills[2].revive() unless @energyFills[2].alive
    if @energy <= @ENERGY_TIERS[2]
      @energyFills[2].scale.setTo(196 * (@energy - @ENERGY_TIERS[1]) / (@ENERGY_TIERS[2] - @ENERGY_TIERS[1]), 1)
      return
    @energyFills[2].scale.setTo(196, 1)

    @energyFills[3].revive() unless @energyFills[3].alive
    if @energy <= @ENERGY_TIERS[3]
      @energyFills[3].scale.setTo(196 * (@energy - @ENERGY_TIERS[2]) / (@ENERGY_TIERS[3] - @ENERGY_TIERS[2]), 1)
      return
    @energyFills[3].scale.setTo(196, 1)
  
  adjustKillBar: ->
    if @nextEnemyLvlUp is null and @kills >= @endScore
      @killFill.scale.setTo(256, 1)
      if @game.gameType is 'Time Attack'
        @killText.text = "Max Kills Reached"
        @displayEnd(true)
      else
        @killText.text = "Max Level Reached (#{@kills})"
    else
      divisor = if @nextEnemyLvlUp? then @nextEnemyLvlUp else @endScore
      @killText.text = "Kills: #{@kills} / #{divisor}"
      @killFill.scale.setTo((256 * (@kills - @previousLvlUp) / (divisor - @previousLvlUp)), 1)

  #
  # UPDATE functions
  #
  toggleBullets: ->
    if @input.keyboard.isDown(Phaser.Keyboard.ONE) and not (@selectedBullet is 'small')
      @selectedBullet = 'small'
    else if @input.keyboard.isDown(Phaser.Keyboard.TWO) and not (@selectedBullet is 'large')
      @selectedBullet = 'large'
    else if @input.keyboard.isDown(Phaser.Keyboard.THREE) and not (@selectedBullet is 'burst')
      @selectedBullet = 'burst'

    if @input.keyboard.isDown(Phaser.Keyboard.Q) and not (@selectedBullet is 'single')
      @selectedFire = 'single'
    else if @input.keyboard.isDown(Phaser.Keyboard.W) and not (@selectedBullet is 'triple')
      @selectedFire = 'triple'
    else if @input.keyboard.isDown(Phaser.Keyboard.E) and not (@selectedBullet is 'bomb')
      @selectedFire = 'bomb'

    # change turret sprite
    if @lastSelectedBullet isnt @selectedBullet or @lastSelectedFire isnt @selectedFire
      for i in @BULLET_TYPES
        @turrets[i].kill()
        @leftTurrets[i].kill()
        @rightTurrets[i].kill()
        unless i is @selectedBullet
          @bbtn[i].kill()
          @bbtnd[i].revive()
        else
          @bbtnd[i].kill()
          @bbtn[i].revive()

      for i in @FIRING_TYPES
        unless i is @selectedFire
          @bbtn[i].kill()
          @bbtnd[i].revive()
        else
          @bbtnd[i].kill()
          @bbtn[i].revive()

      if @selectedFire is 'single' or @selectedFire is 'triple'
        @turrets[@selectedBullet].revive()
      if @selectedFire is 'triple'
        @leftTurrets[@selectedBullet].revive()
        @rightTurrets[@selectedBullet].revive()
        @rotateSideTurrets()

      @lastSelectedBullet = @selectedBullet
      @lastSelectedFire = @selectedFire

    @crosshair.body.velocity.x = 0
    @crosshair.body.velocity.y = 0
    if @input.activePointer.withinGame and @input.activePointer.worldY < 520
      @crosshair.x = @input.activePointer.worldX
      @crosshair.y = @input.activePointer.worldY
    else
      if @cursors.left.isDown
        @crosshair.body.velocity.x = -@crosshair.speed
      else if @cursors.right.isDown
        @crosshair.body.velocity.x = @crosshair.speed

      if @cursors.up.isDown
        @crosshair.body.velocity.y = -@crosshair.speed
      else if @cursors.down.isDown
        @crosshair.body.velocity.y = @crosshair.speed

    if (@input.activePointer.withinGame and @input.activePointer.worldY < 520) or
        (key for key, status of @cursors when status.isDown).length > 0
      turretAngle = @physics.arcade.angleBetween(
        @turrets[@selectedBullet], @crosshair)
      @turrets[@selectedBullet].rotation =
        turretAngle unless 0 < turretAngle < Math.PI

      if @selectedFire is 'triple'
        @rotateSideTurrets()

  rotateSideTurrets: ->
    turretAngle = @physics.arcade.angleBetween(
      @leftTurrets[@selectedBullet], @crosshair)
    @leftTurrets[@selectedBullet].rotation =
      turretAngle unless 0 < turretAngle < Math.PI
    turretAngle = @physics.arcade.angleBetween(
      @rightTurrets[@selectedBullet], @crosshair)
    @rightTurrets[@selectedBullet].rotation =
      turretAngle unless 0 < turretAngle < Math.PI

  fire: ->
    return if @gameEnd
    return if @input.activePointer.isDown and @input.activePointer.worldY >= 520
      
    bullets = @bullets[@BULLET_TYPES.indexOf(@selectedBullet)]
    energyReq = @ENERGY_REQ[@selectedBullet] * @ENERGY_REQ[@selectedFire]
    if (@energy >= energyReq and @canFire and
        bullets.countDead() > @ENERGY_REQ[@selectedBullet])
      @canFire = false
      @time.events.add(
        @FIRE_RATE[@selectedBullet] * @FIRE_RATE[@selectedFire], ->
          @canFire = true
        , this
      )
      @fireSFX.play()

      if @selectedFire is 'single' or @selectedFire is 'triple'
        @turretFire(@turrets[@selectedBullet], bullets)

      if @selectedFire is 'triple'
        @turretFire(@leftTurrets[@selectedBullet], bullets)
        @turretFire(@rightTurrets[@selectedBullet], bullets)

      if @selectedFire is 'bomb'
        bomb = @bombs.getFirstExists(false)
        bomb.reset(@crosshair.x, @crosshair.y)
        bomb.shot = @selectedBullet
        bomb.scale.setTo(3, 3)
        @add.tween(bomb.scale).to({ x: 0.5, y: 0.5 },
          2000, Phaser.Easing.Linear.None, true)
        rotate = @add.tween(bomb).to({ angle: 720 }, 2000)
        rotate.onComplete.add( ->
          t = @game.state.getCurrentState()
          bullets = t.bullets[t.BULLET_TYPES.indexOf(@shot)]
          angle = Math.random() * 2 * Math.PI
          for i in [0..4]
            b = bullets.getFirstExists(false)
            break unless b?
            b.reset(@x, @y)
            b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5)) * 200
            b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5)) * 200
          for i in [0..4]
            b = bullets.getFirstExists(false)
            break unless b?
            b.reset(@x, @y)
            b.body.velocity.x = Math.cos(
              angle + (i * Math.PI * 2 / 5 + Math.PI / 5)) * 200
            b.body.velocity.y = Math.sin(
              angle + (i * Math.PI * 2 / 5 + Math.PI / 5)) * 200
          @kill()
          t.bombSFX.play()
        , bomb)
        rotate.start()

      @energy-= energyReq
      @adjustEnergyBar()

  turretFire: (turret, bullets) ->
    bullet = bullets.getFirstExists(false)
    return unless bullet?
    angle = @physics.arcade.angleBetween(turret, @crosshair)
    offset = @BULLET_OFFSET[@selectedBullet]
    bullet.reset(turret.x + Math.cos(angle) * offset, turret.y + Math.sin(angle) * offset)
    @physics.arcade.moveToObject(bullet, @crosshair, 200)

  createPopupOverlay: ->
    @popupBorder = @add.sprite(400, 270, 'assets', 'popup-border')
    @popupBorder.anchor.setTo(0.5, 0.5)

  checkCollision: ->
    for i in [0...@ENEMY_TYPES.length]
      for j in [0...@BULLET_TYPES.length]
        @physics.arcade.overlap(@bullets[j], @enemies[i], @collisionHandler, null, this)
      @enemies[i].forEach( (enemy) ->
        enemy.kill() if enemy.y > 530 or enemy.x < -50 or enemy.x > 850
      , this)

  spawnEnemy: (enemyIdx) ->
    return if @enemies[enemyIdx].countDead() is 0
    switch enemyIdx
      when 0
        @spawnRookies()
      when 1
        @spawnRegulars()
      when 2
        @spawnSubs()
      when 3
        @spawnVets()
      when 4
        @spawnBombers()
      when 5
        @spawnDestroyers()
      when 6
        @spawnElites()

  spawnRookies: ->
    enemy = @enemies[0].getFirstExists(false)
    enemy.reset(20 + Math.random() * 760, 0)
    enemy.body.velocity.y = 30 + Math.random() * 30
    enemy.play('fly')

  spawnRegulars: ->
    enemy = @enemies[1].getFirstExists(false)
    if Math.random() < 0.5
      enemy.reset(0, 20 + Math.random() * 420)
      enemy.body.velocity.x = 40 + Math.random() * 40
      enemy.rotation = -Math.PI / 2
    else
      enemy.reset(800, 20 + Math.random() * 420)
      enemy.body.velocity.x = -(40 + Math.random() * 40)
      enemy.rotation = Math.PI / 2
    enemy.play('fly')

  spawnSubs: ->
    # try to fit the sub within subs/destroyer lanes 5 times before giving up
    tries = 0
    while tries < 5
      y = 20 + Math.random() * 480
      unless (sub for sub in @enemies[2].children when sub.alive and sub.y <= y + 32 and sub.y + 32 >= y).length > 0 or
          (dest for dest in @enemies[5].children when dest.alive and dest.y <= y + 32 and dest.y + 32 >= y).length > 0
        break
      tries++
    return if tries is 5
    enemy = @enemies[2].getFirstExists(false)
    if Math.random() < 0.5
      enemy.reset(Math.random() * 200, y)
      enemy.rotation = -Math.PI / 2
      enemy.body.velocity.x = 20 + Math.random() * 20
    else
      enemy.reset(800 - Math.random() * 200, y)
      enemy.rotation = Math.PI / 2
      enemy.body.velocity.x = -(20 + Math.random() * 20)
    enemy.body.setSize(98, 32, 0, 0)
    enemy.play('rise')

  spawnVets: ->
    enemy = @enemies[3].getFirstExists(false)
    start = @rnd.integerInRange(20, 500)
    end = @rnd.integerInRange(20, 500)
    enemy.body.velocity.x = 60 + Math.random() * 60
    if Math.random() < 0.5
      enemy.reset(0, start)
      enemy.rotation = @physics.arcade.moveToXY(
        enemy, 800, end, @rnd.integerInRange(60, 120)
      ) - Math.PI / 2
    else
      enemy.reset(800, start)
      enemy.rotation = @physics.arcade.moveToXY(
        enemy, 0, end, @rnd.integerInRange(60, 120)
      ) - Math.PI / 2
    enemy.play('fly')

  spawnBombers: ->
    enemy = @enemies[4].getFirstExists(false)
    enemy.reset(40 + Math.random() * 740, 0)
    enemy.body.velocity.y = 30 + Math.random() * 20
    enemy.play('fly')

  spawnDestroyers: ->
    # try to fit within subs/destroyer lanes 5 times before giving up
    tries = 0
    while tries < 5
      y = 20 + Math.random() * 480
      unless (sub for sub in @enemies[2].children when sub.alive and sub.y <= y + 32 and sub.y + 32 >= y).length > 0 or
          (dest for dest in @enemies[5].children when dest.alive and dest.y <= y + 32 and dest.y + 32 >= y).length > 0
        break
      tries++
    return if tries is 5

    enemy = @enemies[5].getFirstExists(false)
    if Math.random() < 0.5
      enemy.reset(-45, y)
      enemy.rotation = -Math.PI / 2
      enemy.body.velocity.x = 10 + Math.random() * 10
    else
      enemy.reset(845, y)
      enemy.rotation = Math.PI / 2
      enemy.body.velocity.x = -(10 + Math.random() * 10)

    enemy.body.setSize(174, 32, 0, 0)
    enemy.play('cruise')

  spawnElites: ->
    enemy = @enemies[6].getFirstExists(false)
    enemy.reset(10 + Math.random() * 790, 0)
    enemy.body.velocity.y = 100 + Math.random() * 200
    enemy.play('fly')

  collisionHandler: (bullet, enemy) ->
    if bullet.name is 'bullet-burst'
      bullets = @bullets[0]
      angle = Math.random() * 2 * Math.PI
      for i in [0..4]
        b = bullets.getFirstExists(false)
        break unless b?
        b.reset(bullet.x, bullet.y)
        b.body.velocity.x = Math.cos(angle + (i * Math.PI * 2 / 5)) * 200
        b.body.velocity.y = Math.sin(angle + (i * Math.PI * 2 / 5)) * 200
      @burstSFX.play()

    bullet.kill()
    if Math.random() < @HIT_RATE[bullet.name][enemy.name]
      i = parseInt(enemy.name.slice(5))
      explosion = switch enemy.name
        when "enemy4", "enemy5", "enemy6"
          @explosion2SFX.play()
          @explosions2.getFirstExists(false)
        else
          @explosionSFX.play()
          @explosions.getFirstExists(false)

      explosion.reset(enemy.x, enemy.y)
      explosion.body.velocity.x = enemy.body.velocity.x
      explosion.body.velocity.y = enemy.body.velocity.y
      enemy.kill()
      explosion.play('explosion', 15, false, true)

      reward = @add.text(enemy.x, enemy.y, "#{@REWARD[enemy.name]}", { font: '16px Army Wide', fill: '#fff' })
      reward.anchor.setTo(0.5, 0.5)
      rise = @add.tween(reward)
      rise.to({ y: enemy.y - 16 }, 250)
      fade = @add.tween(reward)
      fade.to({ y: enemy.y - 64, alpha: 0 })
      rise.chain(fade)
      fade.onComplete.add(->
        @destroy()
      , reward)
      rise.start()
      @energy += @REWARD[enemy.name]
      @adjustEnergyBar()
      @kills++
      @adjustKillBar()
      if enemy.name is 'enemy6' and @game.gameType is 'Time Attack'
        @displayEnd(true)
    else
      enemy.play('hit')
      @damageSFX.play()

  checkEnemyLevelUp: ->
    if @nextEnemyLvlUp? and @kills >= @nextEnemyLvlUp
      @levelUpEnemy(@nextEnemyLvlUp * @game.lengthMultplier)

  levelUpEnemy: (kills) ->
    return unless @ENEMY_LVL_CHART[kills]?
    action = @ENEMY_LVL_CHART[kills].action
    switch action[0]
      when "unlock"
        @unlockEnemy(action[1], action[2], action[3])
      when "setSpawnRate"
        @time.events.remove @enemySpawners[action[1]]
        @enemySpawners[action[1]] = @game.time.events.loop(action[2], @spawnEnemy, this, action[1])
        @enemyLvlUpText.text = @ENEMY_TYPES[action[1]] + "s are arriving at a faster rate!"
        @setLvlUpExpire()
      when "setMaxCount"
        @setMaxCount(action[1], action[2])

    @previousLvlUp = @nextEnemyLvlUp if @nextEnemyLvlUp?
    @nextEnemyLvlUp = @ENEMY_LVL_CHART[kills].next
    if @nextEnemyLvlUp?
      @nextEnemyLvlUp /= @game.lengthMultplier
      @adjustKillBar()
    else
      @endScore = @ENEMY_LVL_CHART[kills].end / @game.lengthMultplier
      @endText = @add.text 400, 50, "Destroy an elite fighter or reach #{@endScore} kills to win", { font: '14px Army Wide', fill: '#fff' }
      @endText.anchor.setTo(0.5, 0.5)

  unlockEnemy: (enemyIdx, spawnRate, maxCount) ->
    @enemySpawners[enemyIdx] = @game.time.events.loop(spawnRate, @spawnEnemy, this, enemyIdx)
    @enemies[enemyIdx].removeAll(true)
    @enemies[enemyIdx].createMultiple(maxCount, 'assets', 'enemy' + enemyIdx + '-0', false)
    @enemies[enemyIdx].setAll('name', 'enemy' + enemyIdx)
    @setSpriteInfo(enemyIdx)
    @enemyLvlUpText.text = @ENEMY_TYPES[enemyIdx] + "s incoming!"
    @setLvlUpExpire()

  setMaxCount: (enemyIdx, maxCount) ->
    current = @enemies[enemyIdx].children.length
    if current < maxCount
      @enemies[enemyIdx].createMultiple(maxCount - current, 'assets', 'enemy' + enemyIdx + '-0', false)
      @enemies[enemyIdx].setAll('name', 'enemy' + enemyIdx)
    @setSpriteInfo(enemyIdx)
    @enemyLvlUpText.text = @ENEMY_TYPES[enemyIdx] + "s have increased in numbers!"
    @setLvlUpExpire()

  setLvlUpExpire: ->
    @time.events.add(Phaser.Timer.SECOND * 5, ->
      @enemyLvlUpText.text = ""
    , this)

  setSpriteInfo: (enemyIdx) ->
    switch enemyIdx
      when 0, 1, 3, 4, 6
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('hit', [
            'enemy' + enemyIdx + '-3',
            'enemy' + enemyIdx + '-2',
            'enemy' + enemyIdx + '-3',
            'enemy' + enemyIdx + '-2'
          ], 20, false)
          enemy.animations.add('fly',
            Phaser.Animation.generateFrameNames(
              'enemy' + enemyIdx + '-', 0, 2, '', 1),
            20, true)
          enemy.events.onAnimationComplete.add( (enemy) ->
            enemy.play('fly')
          , this)
        , this)
      when 2
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('rise', [
              'enemy2-1',
              'enemy2-2',
              'enemy2-3',
              'enemy2-4',
              'enemy2-5',
              'enemy2-0'
            ], 10, false)
          enemy.animations.add('hit', [
              'enemy2-6',
              'enemy2-0',
              'enemy2-6',
              'enemy2-0',
              'enemy2-6',
              'enemy2-0'
            ], 10, false)
          enemy.animations.add('cruise', [ 0 ], 20, true)
        , this)
      when 5
        @enemies[enemyIdx].forEach( (enemy) ->
          enemy.animations.add('hit', [
              'enemy5-2',
              'enemy5-0',
              'enemy5-2',
              'enemy5-1'
            ], 20, false)
          enemy.animations.add('cruise', [ 'enemy5-0', 'enemy5-1' ], 20, true)
          enemy.events.onAnimationComplete.add( (enemy) ->
            enemy.play('cruise')
          , this)
        , this)

    @enemies[enemyIdx].setAll('anchor.x', 0.5)
    @enemies[enemyIdx].setAll('anchor.y', 0.5)

  pauseGame: ->
    @game.paused = true

    @createPopupOverlay()

    @pausedText = @add.text(400, 150, 'Game Paused',
      { font: '64px Army Wide', fill: '#fff' }
    )
    @pausedText.anchor.setTo(0.5, 0.5)

    @typeHeaderText = @add.text(400, 220, "Game Type:",
      { font: '18px sans-serif', fill: '#fff' }
    )
    @typeHeaderText.anchor.setTo(0.5, 0.5)

    @gameTypeText = @add.text(400, 255, "#{@GAME_LENGTH_TEXT[@game.lengthMultplier]} #{@game.gameType}",
      { font: '40px sans-serif', fill: '#fff' }
    )
    @gameTypeText.anchor.setTo(0.5, 0.5)

    @previousRecordText = @add.text(400, 290, '',
      { font: '16px sans-serif', fill: '#fff' }
    )
    @previousRecordText.anchor.setTo(0.5, 0.5)

    if @game.gameType is 'Time Attack'
      bestTime = Store.get("bestTime-#{@game.lengthMultplier}")
      @previousRecordText.text = "(previous record: #{@timeDisplay(parseInt(bestTime))})" if bestTime?
    else
      highScore = Store.get("survival-#{@game.lengthMultplier}")
      @previousRecordText.text = "(previous record: #{highScore} kills)" if highScore?
    @unpauseText = @add.text(400, 380, "Click/tap outside this box to resume game",
      { font: '18px Army Wide', fill: '#fff' }
    )
    @unpauseText.anchor.setTo(0.5, 0.5)
    <%#@playAgain = @add.text(400, 320, "Restart Game",%>
      <%#{ font: '24px Army Wide', fill: '#fff' }%>
    <%#)%>
    <%#@playAgain.anchor.setTo(0.5, 0.5)%>
    <%#@playAgain.inputEnabled = true%>
    <%#@playAgain.events.onInputDown.add( ->%>
      <%#@restartGame()%>
    <%#, this)%>

    <%#@mainMenu = @add.text(400, 350, "Back to Main Menu",%>
      <%#{ font: '24px Army Wide', fill: '#fff' }%>
    <%#)%>
    <%#@mainMenu.anchor.setTo(0.5, 0.5)%>
    <%#@mainMenu.inputEnabled = true%>
    <%#@mainMenu.events.onInputDown.add( ->%>
      <%#@quitGame()%>
    <%#, this)%>

    @input.onDown.add( (e) ->
      return unless @game.paused
      if e.x > 100 and e.x < 700 and e.y > 70 and e.y < 470
        <%#if e.x > 290 and e.x < 510 and e.y > 310 and e.y < 330%>
          <%#@restartGame()%>
        <%#if e.x > 250 and e.x < 550 and e.y > 340 and e.y < 360%>
          <%#@quitGame()%>
      else
        @resumeGame()
    , this)

  resumeGame: ->
    @popupOverlay.destroy()
    @popupBorder.destroy()
    @pausedText.destroy()
    @typeHeaderText.destroy()
    @gameTypeText.destroy()
    @unpauseText.destroy()
    @previousRecordText.destroy()
    <%#@playAgain.destroy()%>
    <%#@mainMenu.destroy()%>
    @game.paused = false

  displayEnd: (win) ->
    return if @gameEnd
    @gameEnd = true

    if @game.gameType is 'Time Attack'
      @gameTimer.pause()
    else
      @drainCounter.destroy()
      @drainText.destroy()
      @timeText.text = ''

    @createPopupOverlay()

    @add.text(400, 150, (if win then "YOU WIN" else "GAME OVER"),
      { font: '72px Army Wide', fill: '#fff' }
    ).anchor.setTo(0.5, 0.5)
    #@add.text(400, 225, "New Best Time!",
    #  { font: '28px Army Wide', fill: '#fff' }
    #).anchor.setTo(0.5, 0.5)
    <%#@add.text(400, 225, "You beat the game in",%>
      <%#{ font: '22px Army Wide', fill: '#fff' }%>
    <%#).anchor.setTo(0.5, 0.5)%>
    <%#@add.text(400, 260, @timeDisplay(@gameTimer.ms),%>
      <%#{ font: '32px Army Wide', fill: '#fff' }%>
    <%#).anchor.setTo(0.5, 0.5)%>
    <%#@timeText.text = ""%>

    <%#@add.text(400, 290, "(previous record: #{@timeDisplay(@gameTimer.ms)})",%>
      <%#{ font: '18px sans-serif', fill: '#fff' }%>
    <%#).anchor.setTo(0.5, 0.5)%>

    playAgain = @add.text(530, 350, "Play Again",
      { font: '28px Army Wide', fill: '#fff' }
    )
    playAgain.anchor.setTo(0.5, 0.5)
    playAgain.inputEnabled = true
    playAgain.events.onInputDown.add( ->
      @restartGame()
    , this)

    mainMenu = @add.text(270, 350, "Main Menu",
      { font: '28px Army Wide', fill: '#fff' }
    )
    mainMenu.anchor.setTo(0.5, 0.5)
    mainMenu.inputEnabled = true
    mainMenu.events.onInputDown.add( ->
      @quitGame()
    , this)

    if @game.gameType is 'Time Attack'
      if win
        bestTime = Store.get("bestTime-#{@game.lengthMultplier}")
        if !bestTime? or parseInt(bestTime) > @gameTimer.ms
          @add.text(400, 225, "New Best Time!",
            { font: '32px Army Wide', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)
          @add.text(400, 260, @timeDisplay(@gameTimer.ms),
            { font: '32px Army Wide', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)
          Store.set("bestTime-#{@game.lengthMultplier}", @gameTimer.ms)
      else
        bestTime = Store.get("bestTime-#{@game.lengthMultplier}")
        if bestTime?
          @add.text(400, 260,
            "(previous record: #{@timeDisplay(parseInt(bestTime))})",
            { font: '18px sans-serif', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)
    else
      highScore = Store.get("survival-#{@game.lengthMultplier}")
      if !(highScore) or @kills > parseInt(highScore)
        @add.text(400, 225, "New High Score!",
          { font: '32px Army Wide', fill: '#fff' }
        ).anchor.setTo(0.5, 0.5)
        @add.text(400, 260, "#{@kills} kills",
          { font: '32px Army Wide', fill: '#fff' }
        ).anchor.setTo(0.5, 0.5)
        Store.set("survival-#{@game.lengthMultplier}", @kills)
        
      if highScore?
          @add.text(400, 290,
            "(previous record: #{highScore})",
            { font: '18px sans-serif', fill: '#fff' }
          ).anchor.setTo(0.5, 0.5)

  restartGame: ->
    @destroyResources()
    @game.state.start('Game')


  quitGame: ->
    @destroyResources()
    @game.state.start('MainMenu')

  destroyResources: ->
    @land.destroy()
    if @game.gameType is 'Time Attack'
      @gameTimer.destroy()
    @crosshair.destroy()
    enemy.destroy() for enemy in @enemies
    @explosions.destroy()
    @explosions2.destroy()
    bullet.destroy() for bullet in @bullets
    @bombs.destroy()
    @fireSFX.destroy()
    @burstSFX.destroy()
    @bombSFX.destroy()
    @explosionSFX.destroy()
    @explosion2SFX.destroy()
    @damageSFX.destroy()
    @deck.destroy()
    @energyContainer.destroy()
    bar.destroy() for bar in @energyFills
    @killContainer.destroy()
    @killFill.destroy()
    turret.destroy() for k, turret of @turrets
    turret.destroy() for k, turret of @leftTurrets
    turret.destroy() for k, turret of @rightTurrets
    button.destroy() for k, button of @bbtn
    button.destroy() for k, button of @bbtnd
    @soundIcon.destroy()
    @optionsIcon.destroy()
    @timeText.destroy()
    @energyText.destroy()
    @killText.destroy()
    @enemyLvlUpText.destroy()
    @gameEnd = false

game = new Phaser.Game(800, 600, Phaser.AUTO, 'game-container')
game.state.add('Boot', Boot)
game.state.add('Preloader', Preloader)
game.state.add('MainMenu', MainMenu)
game.state.add('Game', Game)

game.state.start('Boot')
